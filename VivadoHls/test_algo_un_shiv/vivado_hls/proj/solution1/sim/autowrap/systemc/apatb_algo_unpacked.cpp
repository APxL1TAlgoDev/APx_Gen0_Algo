// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "link_in_0_V"
#define AUTOTB_TVIN_link_in_0_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_0_V.dat"
// wrapc file define: "link_in_1_V"
#define AUTOTB_TVIN_link_in_1_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_1_V.dat"
// wrapc file define: "link_in_2_V"
#define AUTOTB_TVIN_link_in_2_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_2_V.dat"
// wrapc file define: "link_in_3_V"
#define AUTOTB_TVIN_link_in_3_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_3_V.dat"
// wrapc file define: "link_in_4_V"
#define AUTOTB_TVIN_link_in_4_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_4_V.dat"
// wrapc file define: "link_in_5_V"
#define AUTOTB_TVIN_link_in_5_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_5_V.dat"
// wrapc file define: "link_in_6_V"
#define AUTOTB_TVIN_link_in_6_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_6_V.dat"
// wrapc file define: "link_in_7_V"
#define AUTOTB_TVIN_link_in_7_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_7_V.dat"
// wrapc file define: "link_in_8_V"
#define AUTOTB_TVIN_link_in_8_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_8_V.dat"
// wrapc file define: "link_in_9_V"
#define AUTOTB_TVIN_link_in_9_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_9_V.dat"
// wrapc file define: "link_in_10_V"
#define AUTOTB_TVIN_link_in_10_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_10_V.dat"
// wrapc file define: "link_in_11_V"
#define AUTOTB_TVIN_link_in_11_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_11_V.dat"
// wrapc file define: "link_in_12_V"
#define AUTOTB_TVIN_link_in_12_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_12_V.dat"
// wrapc file define: "link_in_13_V"
#define AUTOTB_TVIN_link_in_13_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_13_V.dat"
// wrapc file define: "link_in_14_V"
#define AUTOTB_TVIN_link_in_14_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_14_V.dat"
// wrapc file define: "link_in_15_V"
#define AUTOTB_TVIN_link_in_15_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_15_V.dat"
// wrapc file define: "link_in_16_V"
#define AUTOTB_TVIN_link_in_16_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_16_V.dat"
// wrapc file define: "link_in_17_V"
#define AUTOTB_TVIN_link_in_17_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_17_V.dat"
// wrapc file define: "link_in_18_V"
#define AUTOTB_TVIN_link_in_18_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_18_V.dat"
// wrapc file define: "link_in_19_V"
#define AUTOTB_TVIN_link_in_19_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_19_V.dat"
// wrapc file define: "link_in_20_V"
#define AUTOTB_TVIN_link_in_20_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_20_V.dat"
// wrapc file define: "link_in_21_V"
#define AUTOTB_TVIN_link_in_21_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_21_V.dat"
// wrapc file define: "link_in_22_V"
#define AUTOTB_TVIN_link_in_22_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_22_V.dat"
// wrapc file define: "link_in_23_V"
#define AUTOTB_TVIN_link_in_23_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_23_V.dat"
// wrapc file define: "link_in_24_V"
#define AUTOTB_TVIN_link_in_24_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_24_V.dat"
// wrapc file define: "link_in_25_V"
#define AUTOTB_TVIN_link_in_25_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_25_V.dat"
// wrapc file define: "link_in_26_V"
#define AUTOTB_TVIN_link_in_26_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_26_V.dat"
// wrapc file define: "link_in_27_V"
#define AUTOTB_TVIN_link_in_27_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_27_V.dat"
// wrapc file define: "link_in_28_V"
#define AUTOTB_TVIN_link_in_28_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_28_V.dat"
// wrapc file define: "link_in_29_V"
#define AUTOTB_TVIN_link_in_29_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_29_V.dat"
// wrapc file define: "link_in_30_V"
#define AUTOTB_TVIN_link_in_30_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_30_V.dat"
// wrapc file define: "link_in_31_V"
#define AUTOTB_TVIN_link_in_31_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_31_V.dat"
// wrapc file define: "link_in_32_V"
#define AUTOTB_TVIN_link_in_32_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_32_V.dat"
// wrapc file define: "link_in_33_V"
#define AUTOTB_TVIN_link_in_33_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_33_V.dat"
// wrapc file define: "link_in_34_V"
#define AUTOTB_TVIN_link_in_34_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_34_V.dat"
// wrapc file define: "link_in_35_V"
#define AUTOTB_TVIN_link_in_35_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_35_V.dat"
// wrapc file define: "link_in_36_V"
#define AUTOTB_TVIN_link_in_36_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_36_V.dat"
// wrapc file define: "link_in_37_V"
#define AUTOTB_TVIN_link_in_37_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_37_V.dat"
// wrapc file define: "link_in_38_V"
#define AUTOTB_TVIN_link_in_38_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_38_V.dat"
// wrapc file define: "link_in_39_V"
#define AUTOTB_TVIN_link_in_39_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_39_V.dat"
// wrapc file define: "link_in_40_V"
#define AUTOTB_TVIN_link_in_40_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_40_V.dat"
// wrapc file define: "link_in_41_V"
#define AUTOTB_TVIN_link_in_41_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_41_V.dat"
// wrapc file define: "link_in_42_V"
#define AUTOTB_TVIN_link_in_42_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_42_V.dat"
// wrapc file define: "link_in_43_V"
#define AUTOTB_TVIN_link_in_43_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_43_V.dat"
// wrapc file define: "link_in_44_V"
#define AUTOTB_TVIN_link_in_44_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_44_V.dat"
// wrapc file define: "link_in_45_V"
#define AUTOTB_TVIN_link_in_45_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_45_V.dat"
// wrapc file define: "link_in_46_V"
#define AUTOTB_TVIN_link_in_46_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_46_V.dat"
// wrapc file define: "link_in_47_V"
#define AUTOTB_TVIN_link_in_47_V  "../tv/cdatafile/c.algo_unpacked.autotvin_link_in_47_V.dat"
// wrapc file define: "link_out_0_V"
#define AUTOTB_TVOUT_link_out_0_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_0_V.dat"
// wrapc file define: "link_out_1_V"
#define AUTOTB_TVOUT_link_out_1_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_1_V.dat"
// wrapc file define: "link_out_2_V"
#define AUTOTB_TVOUT_link_out_2_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_2_V.dat"
// wrapc file define: "link_out_3_V"
#define AUTOTB_TVOUT_link_out_3_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_3_V.dat"
// wrapc file define: "link_out_4_V"
#define AUTOTB_TVOUT_link_out_4_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_4_V.dat"
// wrapc file define: "link_out_5_V"
#define AUTOTB_TVOUT_link_out_5_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_5_V.dat"
// wrapc file define: "link_out_6_V"
#define AUTOTB_TVOUT_link_out_6_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_6_V.dat"
// wrapc file define: "link_out_7_V"
#define AUTOTB_TVOUT_link_out_7_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_7_V.dat"
// wrapc file define: "link_out_8_V"
#define AUTOTB_TVOUT_link_out_8_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_8_V.dat"
// wrapc file define: "link_out_9_V"
#define AUTOTB_TVOUT_link_out_9_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_9_V.dat"
// wrapc file define: "link_out_10_V"
#define AUTOTB_TVOUT_link_out_10_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_10_V.dat"
// wrapc file define: "link_out_11_V"
#define AUTOTB_TVOUT_link_out_11_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_11_V.dat"
// wrapc file define: "link_out_12_V"
#define AUTOTB_TVOUT_link_out_12_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_12_V.dat"
// wrapc file define: "link_out_13_V"
#define AUTOTB_TVOUT_link_out_13_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_13_V.dat"
// wrapc file define: "link_out_14_V"
#define AUTOTB_TVOUT_link_out_14_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_14_V.dat"
// wrapc file define: "link_out_15_V"
#define AUTOTB_TVOUT_link_out_15_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_15_V.dat"
// wrapc file define: "link_out_16_V"
#define AUTOTB_TVOUT_link_out_16_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_16_V.dat"
// wrapc file define: "link_out_17_V"
#define AUTOTB_TVOUT_link_out_17_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_17_V.dat"
// wrapc file define: "link_out_18_V"
#define AUTOTB_TVOUT_link_out_18_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_18_V.dat"
// wrapc file define: "link_out_19_V"
#define AUTOTB_TVOUT_link_out_19_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_19_V.dat"
// wrapc file define: "link_out_20_V"
#define AUTOTB_TVOUT_link_out_20_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_20_V.dat"
// wrapc file define: "link_out_21_V"
#define AUTOTB_TVOUT_link_out_21_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_21_V.dat"
// wrapc file define: "link_out_22_V"
#define AUTOTB_TVOUT_link_out_22_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_22_V.dat"
// wrapc file define: "link_out_23_V"
#define AUTOTB_TVOUT_link_out_23_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_23_V.dat"
// wrapc file define: "link_out_24_V"
#define AUTOTB_TVOUT_link_out_24_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_24_V.dat"
// wrapc file define: "link_out_25_V"
#define AUTOTB_TVOUT_link_out_25_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_25_V.dat"
// wrapc file define: "link_out_26_V"
#define AUTOTB_TVOUT_link_out_26_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_26_V.dat"
// wrapc file define: "link_out_27_V"
#define AUTOTB_TVOUT_link_out_27_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_27_V.dat"
// wrapc file define: "link_out_28_V"
#define AUTOTB_TVOUT_link_out_28_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_28_V.dat"
// wrapc file define: "link_out_29_V"
#define AUTOTB_TVOUT_link_out_29_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_29_V.dat"
// wrapc file define: "link_out_30_V"
#define AUTOTB_TVOUT_link_out_30_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_30_V.dat"
// wrapc file define: "link_out_31_V"
#define AUTOTB_TVOUT_link_out_31_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_31_V.dat"
// wrapc file define: "link_out_32_V"
#define AUTOTB_TVOUT_link_out_32_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_32_V.dat"
// wrapc file define: "link_out_33_V"
#define AUTOTB_TVOUT_link_out_33_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_33_V.dat"
// wrapc file define: "link_out_34_V"
#define AUTOTB_TVOUT_link_out_34_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_34_V.dat"
// wrapc file define: "link_out_35_V"
#define AUTOTB_TVOUT_link_out_35_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_35_V.dat"
// wrapc file define: "link_out_36_V"
#define AUTOTB_TVOUT_link_out_36_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_36_V.dat"
// wrapc file define: "link_out_37_V"
#define AUTOTB_TVOUT_link_out_37_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_37_V.dat"
// wrapc file define: "link_out_38_V"
#define AUTOTB_TVOUT_link_out_38_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_38_V.dat"
// wrapc file define: "link_out_39_V"
#define AUTOTB_TVOUT_link_out_39_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_39_V.dat"
// wrapc file define: "link_out_40_V"
#define AUTOTB_TVOUT_link_out_40_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_40_V.dat"
// wrapc file define: "link_out_41_V"
#define AUTOTB_TVOUT_link_out_41_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_41_V.dat"
// wrapc file define: "link_out_42_V"
#define AUTOTB_TVOUT_link_out_42_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_42_V.dat"
// wrapc file define: "link_out_43_V"
#define AUTOTB_TVOUT_link_out_43_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_43_V.dat"
// wrapc file define: "link_out_44_V"
#define AUTOTB_TVOUT_link_out_44_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_44_V.dat"
// wrapc file define: "link_out_45_V"
#define AUTOTB_TVOUT_link_out_45_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_45_V.dat"
// wrapc file define: "link_out_46_V"
#define AUTOTB_TVOUT_link_out_46_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_46_V.dat"
// wrapc file define: "link_out_47_V"
#define AUTOTB_TVOUT_link_out_47_V  "../tv/cdatafile/c.algo_unpacked.autotvout_link_out_47_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "link_out_0_V"
#define AUTOTB_TVOUT_PC_link_out_0_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_0_V.dat"
// tvout file define: "link_out_1_V"
#define AUTOTB_TVOUT_PC_link_out_1_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_1_V.dat"
// tvout file define: "link_out_2_V"
#define AUTOTB_TVOUT_PC_link_out_2_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_2_V.dat"
// tvout file define: "link_out_3_V"
#define AUTOTB_TVOUT_PC_link_out_3_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_3_V.dat"
// tvout file define: "link_out_4_V"
#define AUTOTB_TVOUT_PC_link_out_4_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_4_V.dat"
// tvout file define: "link_out_5_V"
#define AUTOTB_TVOUT_PC_link_out_5_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_5_V.dat"
// tvout file define: "link_out_6_V"
#define AUTOTB_TVOUT_PC_link_out_6_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_6_V.dat"
// tvout file define: "link_out_7_V"
#define AUTOTB_TVOUT_PC_link_out_7_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_7_V.dat"
// tvout file define: "link_out_8_V"
#define AUTOTB_TVOUT_PC_link_out_8_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_8_V.dat"
// tvout file define: "link_out_9_V"
#define AUTOTB_TVOUT_PC_link_out_9_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_9_V.dat"
// tvout file define: "link_out_10_V"
#define AUTOTB_TVOUT_PC_link_out_10_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_10_V.dat"
// tvout file define: "link_out_11_V"
#define AUTOTB_TVOUT_PC_link_out_11_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_11_V.dat"
// tvout file define: "link_out_12_V"
#define AUTOTB_TVOUT_PC_link_out_12_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_12_V.dat"
// tvout file define: "link_out_13_V"
#define AUTOTB_TVOUT_PC_link_out_13_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_13_V.dat"
// tvout file define: "link_out_14_V"
#define AUTOTB_TVOUT_PC_link_out_14_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_14_V.dat"
// tvout file define: "link_out_15_V"
#define AUTOTB_TVOUT_PC_link_out_15_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_15_V.dat"
// tvout file define: "link_out_16_V"
#define AUTOTB_TVOUT_PC_link_out_16_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_16_V.dat"
// tvout file define: "link_out_17_V"
#define AUTOTB_TVOUT_PC_link_out_17_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_17_V.dat"
// tvout file define: "link_out_18_V"
#define AUTOTB_TVOUT_PC_link_out_18_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_18_V.dat"
// tvout file define: "link_out_19_V"
#define AUTOTB_TVOUT_PC_link_out_19_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_19_V.dat"
// tvout file define: "link_out_20_V"
#define AUTOTB_TVOUT_PC_link_out_20_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_20_V.dat"
// tvout file define: "link_out_21_V"
#define AUTOTB_TVOUT_PC_link_out_21_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_21_V.dat"
// tvout file define: "link_out_22_V"
#define AUTOTB_TVOUT_PC_link_out_22_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_22_V.dat"
// tvout file define: "link_out_23_V"
#define AUTOTB_TVOUT_PC_link_out_23_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_23_V.dat"
// tvout file define: "link_out_24_V"
#define AUTOTB_TVOUT_PC_link_out_24_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_24_V.dat"
// tvout file define: "link_out_25_V"
#define AUTOTB_TVOUT_PC_link_out_25_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_25_V.dat"
// tvout file define: "link_out_26_V"
#define AUTOTB_TVOUT_PC_link_out_26_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_26_V.dat"
// tvout file define: "link_out_27_V"
#define AUTOTB_TVOUT_PC_link_out_27_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_27_V.dat"
// tvout file define: "link_out_28_V"
#define AUTOTB_TVOUT_PC_link_out_28_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_28_V.dat"
// tvout file define: "link_out_29_V"
#define AUTOTB_TVOUT_PC_link_out_29_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_29_V.dat"
// tvout file define: "link_out_30_V"
#define AUTOTB_TVOUT_PC_link_out_30_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_30_V.dat"
// tvout file define: "link_out_31_V"
#define AUTOTB_TVOUT_PC_link_out_31_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_31_V.dat"
// tvout file define: "link_out_32_V"
#define AUTOTB_TVOUT_PC_link_out_32_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_32_V.dat"
// tvout file define: "link_out_33_V"
#define AUTOTB_TVOUT_PC_link_out_33_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_33_V.dat"
// tvout file define: "link_out_34_V"
#define AUTOTB_TVOUT_PC_link_out_34_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_34_V.dat"
// tvout file define: "link_out_35_V"
#define AUTOTB_TVOUT_PC_link_out_35_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_35_V.dat"
// tvout file define: "link_out_36_V"
#define AUTOTB_TVOUT_PC_link_out_36_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_36_V.dat"
// tvout file define: "link_out_37_V"
#define AUTOTB_TVOUT_PC_link_out_37_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_37_V.dat"
// tvout file define: "link_out_38_V"
#define AUTOTB_TVOUT_PC_link_out_38_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_38_V.dat"
// tvout file define: "link_out_39_V"
#define AUTOTB_TVOUT_PC_link_out_39_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_39_V.dat"
// tvout file define: "link_out_40_V"
#define AUTOTB_TVOUT_PC_link_out_40_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_40_V.dat"
// tvout file define: "link_out_41_V"
#define AUTOTB_TVOUT_PC_link_out_41_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_41_V.dat"
// tvout file define: "link_out_42_V"
#define AUTOTB_TVOUT_PC_link_out_42_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_42_V.dat"
// tvout file define: "link_out_43_V"
#define AUTOTB_TVOUT_PC_link_out_43_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_43_V.dat"
// tvout file define: "link_out_44_V"
#define AUTOTB_TVOUT_PC_link_out_44_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_44_V.dat"
// tvout file define: "link_out_45_V"
#define AUTOTB_TVOUT_PC_link_out_45_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_45_V.dat"
// tvout file define: "link_out_46_V"
#define AUTOTB_TVOUT_PC_link_out_46_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_46_V.dat"
// tvout file define: "link_out_47_V"
#define AUTOTB_TVOUT_PC_link_out_47_V  "../tv/rtldatafile/rtl.algo_unpacked.autotvout_link_out_47_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			link_in_0_V_depth = 0;
			link_in_1_V_depth = 0;
			link_in_2_V_depth = 0;
			link_in_3_V_depth = 0;
			link_in_4_V_depth = 0;
			link_in_5_V_depth = 0;
			link_in_6_V_depth = 0;
			link_in_7_V_depth = 0;
			link_in_8_V_depth = 0;
			link_in_9_V_depth = 0;
			link_in_10_V_depth = 0;
			link_in_11_V_depth = 0;
			link_in_12_V_depth = 0;
			link_in_13_V_depth = 0;
			link_in_14_V_depth = 0;
			link_in_15_V_depth = 0;
			link_in_16_V_depth = 0;
			link_in_17_V_depth = 0;
			link_in_18_V_depth = 0;
			link_in_19_V_depth = 0;
			link_in_20_V_depth = 0;
			link_in_21_V_depth = 0;
			link_in_22_V_depth = 0;
			link_in_23_V_depth = 0;
			link_in_24_V_depth = 0;
			link_in_25_V_depth = 0;
			link_in_26_V_depth = 0;
			link_in_27_V_depth = 0;
			link_in_28_V_depth = 0;
			link_in_29_V_depth = 0;
			link_in_30_V_depth = 0;
			link_in_31_V_depth = 0;
			link_in_32_V_depth = 0;
			link_in_33_V_depth = 0;
			link_in_34_V_depth = 0;
			link_in_35_V_depth = 0;
			link_in_36_V_depth = 0;
			link_in_37_V_depth = 0;
			link_in_38_V_depth = 0;
			link_in_39_V_depth = 0;
			link_in_40_V_depth = 0;
			link_in_41_V_depth = 0;
			link_in_42_V_depth = 0;
			link_in_43_V_depth = 0;
			link_in_44_V_depth = 0;
			link_in_45_V_depth = 0;
			link_in_46_V_depth = 0;
			link_in_47_V_depth = 0;
			link_out_0_V_depth = 0;
			link_out_1_V_depth = 0;
			link_out_2_V_depth = 0;
			link_out_3_V_depth = 0;
			link_out_4_V_depth = 0;
			link_out_5_V_depth = 0;
			link_out_6_V_depth = 0;
			link_out_7_V_depth = 0;
			link_out_8_V_depth = 0;
			link_out_9_V_depth = 0;
			link_out_10_V_depth = 0;
			link_out_11_V_depth = 0;
			link_out_12_V_depth = 0;
			link_out_13_V_depth = 0;
			link_out_14_V_depth = 0;
			link_out_15_V_depth = 0;
			link_out_16_V_depth = 0;
			link_out_17_V_depth = 0;
			link_out_18_V_depth = 0;
			link_out_19_V_depth = 0;
			link_out_20_V_depth = 0;
			link_out_21_V_depth = 0;
			link_out_22_V_depth = 0;
			link_out_23_V_depth = 0;
			link_out_24_V_depth = 0;
			link_out_25_V_depth = 0;
			link_out_26_V_depth = 0;
			link_out_27_V_depth = 0;
			link_out_28_V_depth = 0;
			link_out_29_V_depth = 0;
			link_out_30_V_depth = 0;
			link_out_31_V_depth = 0;
			link_out_32_V_depth = 0;
			link_out_33_V_depth = 0;
			link_out_34_V_depth = 0;
			link_out_35_V_depth = 0;
			link_out_36_V_depth = 0;
			link_out_37_V_depth = 0;
			link_out_38_V_depth = 0;
			link_out_39_V_depth = 0;
			link_out_40_V_depth = 0;
			link_out_41_V_depth = 0;
			link_out_42_V_depth = 0;
			link_out_43_V_depth = 0;
			link_out_44_V_depth = 0;
			link_out_45_V_depth = 0;
			link_out_46_V_depth = 0;
			link_out_47_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{link_in_0_V " << link_in_0_V_depth << "}\n";
			total_list << "{link_in_1_V " << link_in_1_V_depth << "}\n";
			total_list << "{link_in_2_V " << link_in_2_V_depth << "}\n";
			total_list << "{link_in_3_V " << link_in_3_V_depth << "}\n";
			total_list << "{link_in_4_V " << link_in_4_V_depth << "}\n";
			total_list << "{link_in_5_V " << link_in_5_V_depth << "}\n";
			total_list << "{link_in_6_V " << link_in_6_V_depth << "}\n";
			total_list << "{link_in_7_V " << link_in_7_V_depth << "}\n";
			total_list << "{link_in_8_V " << link_in_8_V_depth << "}\n";
			total_list << "{link_in_9_V " << link_in_9_V_depth << "}\n";
			total_list << "{link_in_10_V " << link_in_10_V_depth << "}\n";
			total_list << "{link_in_11_V " << link_in_11_V_depth << "}\n";
			total_list << "{link_in_12_V " << link_in_12_V_depth << "}\n";
			total_list << "{link_in_13_V " << link_in_13_V_depth << "}\n";
			total_list << "{link_in_14_V " << link_in_14_V_depth << "}\n";
			total_list << "{link_in_15_V " << link_in_15_V_depth << "}\n";
			total_list << "{link_in_16_V " << link_in_16_V_depth << "}\n";
			total_list << "{link_in_17_V " << link_in_17_V_depth << "}\n";
			total_list << "{link_in_18_V " << link_in_18_V_depth << "}\n";
			total_list << "{link_in_19_V " << link_in_19_V_depth << "}\n";
			total_list << "{link_in_20_V " << link_in_20_V_depth << "}\n";
			total_list << "{link_in_21_V " << link_in_21_V_depth << "}\n";
			total_list << "{link_in_22_V " << link_in_22_V_depth << "}\n";
			total_list << "{link_in_23_V " << link_in_23_V_depth << "}\n";
			total_list << "{link_in_24_V " << link_in_24_V_depth << "}\n";
			total_list << "{link_in_25_V " << link_in_25_V_depth << "}\n";
			total_list << "{link_in_26_V " << link_in_26_V_depth << "}\n";
			total_list << "{link_in_27_V " << link_in_27_V_depth << "}\n";
			total_list << "{link_in_28_V " << link_in_28_V_depth << "}\n";
			total_list << "{link_in_29_V " << link_in_29_V_depth << "}\n";
			total_list << "{link_in_30_V " << link_in_30_V_depth << "}\n";
			total_list << "{link_in_31_V " << link_in_31_V_depth << "}\n";
			total_list << "{link_in_32_V " << link_in_32_V_depth << "}\n";
			total_list << "{link_in_33_V " << link_in_33_V_depth << "}\n";
			total_list << "{link_in_34_V " << link_in_34_V_depth << "}\n";
			total_list << "{link_in_35_V " << link_in_35_V_depth << "}\n";
			total_list << "{link_in_36_V " << link_in_36_V_depth << "}\n";
			total_list << "{link_in_37_V " << link_in_37_V_depth << "}\n";
			total_list << "{link_in_38_V " << link_in_38_V_depth << "}\n";
			total_list << "{link_in_39_V " << link_in_39_V_depth << "}\n";
			total_list << "{link_in_40_V " << link_in_40_V_depth << "}\n";
			total_list << "{link_in_41_V " << link_in_41_V_depth << "}\n";
			total_list << "{link_in_42_V " << link_in_42_V_depth << "}\n";
			total_list << "{link_in_43_V " << link_in_43_V_depth << "}\n";
			total_list << "{link_in_44_V " << link_in_44_V_depth << "}\n";
			total_list << "{link_in_45_V " << link_in_45_V_depth << "}\n";
			total_list << "{link_in_46_V " << link_in_46_V_depth << "}\n";
			total_list << "{link_in_47_V " << link_in_47_V_depth << "}\n";
			total_list << "{link_out_0_V " << link_out_0_V_depth << "}\n";
			total_list << "{link_out_1_V " << link_out_1_V_depth << "}\n";
			total_list << "{link_out_2_V " << link_out_2_V_depth << "}\n";
			total_list << "{link_out_3_V " << link_out_3_V_depth << "}\n";
			total_list << "{link_out_4_V " << link_out_4_V_depth << "}\n";
			total_list << "{link_out_5_V " << link_out_5_V_depth << "}\n";
			total_list << "{link_out_6_V " << link_out_6_V_depth << "}\n";
			total_list << "{link_out_7_V " << link_out_7_V_depth << "}\n";
			total_list << "{link_out_8_V " << link_out_8_V_depth << "}\n";
			total_list << "{link_out_9_V " << link_out_9_V_depth << "}\n";
			total_list << "{link_out_10_V " << link_out_10_V_depth << "}\n";
			total_list << "{link_out_11_V " << link_out_11_V_depth << "}\n";
			total_list << "{link_out_12_V " << link_out_12_V_depth << "}\n";
			total_list << "{link_out_13_V " << link_out_13_V_depth << "}\n";
			total_list << "{link_out_14_V " << link_out_14_V_depth << "}\n";
			total_list << "{link_out_15_V " << link_out_15_V_depth << "}\n";
			total_list << "{link_out_16_V " << link_out_16_V_depth << "}\n";
			total_list << "{link_out_17_V " << link_out_17_V_depth << "}\n";
			total_list << "{link_out_18_V " << link_out_18_V_depth << "}\n";
			total_list << "{link_out_19_V " << link_out_19_V_depth << "}\n";
			total_list << "{link_out_20_V " << link_out_20_V_depth << "}\n";
			total_list << "{link_out_21_V " << link_out_21_V_depth << "}\n";
			total_list << "{link_out_22_V " << link_out_22_V_depth << "}\n";
			total_list << "{link_out_23_V " << link_out_23_V_depth << "}\n";
			total_list << "{link_out_24_V " << link_out_24_V_depth << "}\n";
			total_list << "{link_out_25_V " << link_out_25_V_depth << "}\n";
			total_list << "{link_out_26_V " << link_out_26_V_depth << "}\n";
			total_list << "{link_out_27_V " << link_out_27_V_depth << "}\n";
			total_list << "{link_out_28_V " << link_out_28_V_depth << "}\n";
			total_list << "{link_out_29_V " << link_out_29_V_depth << "}\n";
			total_list << "{link_out_30_V " << link_out_30_V_depth << "}\n";
			total_list << "{link_out_31_V " << link_out_31_V_depth << "}\n";
			total_list << "{link_out_32_V " << link_out_32_V_depth << "}\n";
			total_list << "{link_out_33_V " << link_out_33_V_depth << "}\n";
			total_list << "{link_out_34_V " << link_out_34_V_depth << "}\n";
			total_list << "{link_out_35_V " << link_out_35_V_depth << "}\n";
			total_list << "{link_out_36_V " << link_out_36_V_depth << "}\n";
			total_list << "{link_out_37_V " << link_out_37_V_depth << "}\n";
			total_list << "{link_out_38_V " << link_out_38_V_depth << "}\n";
			total_list << "{link_out_39_V " << link_out_39_V_depth << "}\n";
			total_list << "{link_out_40_V " << link_out_40_V_depth << "}\n";
			total_list << "{link_out_41_V " << link_out_41_V_depth << "}\n";
			total_list << "{link_out_42_V " << link_out_42_V_depth << "}\n";
			total_list << "{link_out_43_V " << link_out_43_V_depth << "}\n";
			total_list << "{link_out_44_V " << link_out_44_V_depth << "}\n";
			total_list << "{link_out_45_V " << link_out_45_V_depth << "}\n";
			total_list << "{link_out_46_V " << link_out_46_V_depth << "}\n";
			total_list << "{link_out_47_V " << link_out_47_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int link_in_0_V_depth;
		int link_in_1_V_depth;
		int link_in_2_V_depth;
		int link_in_3_V_depth;
		int link_in_4_V_depth;
		int link_in_5_V_depth;
		int link_in_6_V_depth;
		int link_in_7_V_depth;
		int link_in_8_V_depth;
		int link_in_9_V_depth;
		int link_in_10_V_depth;
		int link_in_11_V_depth;
		int link_in_12_V_depth;
		int link_in_13_V_depth;
		int link_in_14_V_depth;
		int link_in_15_V_depth;
		int link_in_16_V_depth;
		int link_in_17_V_depth;
		int link_in_18_V_depth;
		int link_in_19_V_depth;
		int link_in_20_V_depth;
		int link_in_21_V_depth;
		int link_in_22_V_depth;
		int link_in_23_V_depth;
		int link_in_24_V_depth;
		int link_in_25_V_depth;
		int link_in_26_V_depth;
		int link_in_27_V_depth;
		int link_in_28_V_depth;
		int link_in_29_V_depth;
		int link_in_30_V_depth;
		int link_in_31_V_depth;
		int link_in_32_V_depth;
		int link_in_33_V_depth;
		int link_in_34_V_depth;
		int link_in_35_V_depth;
		int link_in_36_V_depth;
		int link_in_37_V_depth;
		int link_in_38_V_depth;
		int link_in_39_V_depth;
		int link_in_40_V_depth;
		int link_in_41_V_depth;
		int link_in_42_V_depth;
		int link_in_43_V_depth;
		int link_in_44_V_depth;
		int link_in_45_V_depth;
		int link_in_46_V_depth;
		int link_in_47_V_depth;
		int link_out_0_V_depth;
		int link_out_1_V_depth;
		int link_out_2_V_depth;
		int link_out_3_V_depth;
		int link_out_4_V_depth;
		int link_out_5_V_depth;
		int link_out_6_V_depth;
		int link_out_7_V_depth;
		int link_out_8_V_depth;
		int link_out_9_V_depth;
		int link_out_10_V_depth;
		int link_out_11_V_depth;
		int link_out_12_V_depth;
		int link_out_13_V_depth;
		int link_out_14_V_depth;
		int link_out_15_V_depth;
		int link_out_16_V_depth;
		int link_out_17_V_depth;
		int link_out_18_V_depth;
		int link_out_19_V_depth;
		int link_out_20_V_depth;
		int link_out_21_V_depth;
		int link_out_22_V_depth;
		int link_out_23_V_depth;
		int link_out_24_V_depth;
		int link_out_25_V_depth;
		int link_out_26_V_depth;
		int link_out_27_V_depth;
		int link_out_28_V_depth;
		int link_out_29_V_depth;
		int link_out_30_V_depth;
		int link_out_31_V_depth;
		int link_out_32_V_depth;
		int link_out_33_V_depth;
		int link_out_34_V_depth;
		int link_out_35_V_depth;
		int link_out_36_V_depth;
		int link_out_37_V_depth;
		int link_out_38_V_depth;
		int link_out_39_V_depth;
		int link_out_40_V_depth;
		int link_out_41_V_depth;
		int link_out_42_V_depth;
		int link_out_43_V_depth;
		int link_out_44_V_depth;
		int link_out_45_V_depth;
		int link_out_46_V_depth;
		int link_out_47_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern void algo_unpacked (
ap_uint<192> link_in[48],
ap_uint<192> link_out[48]);

void AESL_WRAP_algo_unpacked (
ap_uint<192> link_in[48],
ap_uint<192> link_out[48])
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "link_out_0_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_0_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_0_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_0_V, AESL_token); // data

			sc_bv<192> *link_out_0_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_0_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_0_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_0_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_0_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_0_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_0_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_0_0_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_0_0_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_0_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (0) => (0) @ (2)
							for (int i_0 = 0; i_0 <= 0; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_0_0_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_0_0_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_0_V_pc_buffer;
		}

		// output port post check: "link_out_1_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_1_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_1_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_1_V, AESL_token); // data

			sc_bv<192> *link_out_1_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_1_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_1_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_1_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_1_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_1_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_1_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_1_1_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (1) => (1) @ (2)
							for (int i_0 = 1; i_0 <= 1; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_1_1_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_1_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (1) => (1) @ (2)
							for (int i_0 = 1; i_0 <= 1; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_1_1_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_1_1_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_1_V_pc_buffer;
		}

		// output port post check: "link_out_2_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_2_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_2_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_2_V, AESL_token); // data

			sc_bv<192> *link_out_2_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_2_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_2_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_2_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_2_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_2_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_2_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_2_2_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (2) => (2) @ (2)
							for (int i_0 = 2; i_0 <= 2; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_2_2_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_2_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (2) => (2) @ (2)
							for (int i_0 = 2; i_0 <= 2; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_2_2_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_2_2_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_2_V_pc_buffer;
		}

		// output port post check: "link_out_3_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_3_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_3_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_3_V, AESL_token); // data

			sc_bv<192> *link_out_3_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_3_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_3_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_3_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_3_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_3_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_3_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_3_3_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (3) => (3) @ (2)
							for (int i_0 = 3; i_0 <= 3; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_3_3_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_3_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (3) => (3) @ (2)
							for (int i_0 = 3; i_0 <= 3; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_3_3_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_3_3_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_3_V_pc_buffer;
		}

		// output port post check: "link_out_4_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_4_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_4_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_4_V, AESL_token); // data

			sc_bv<192> *link_out_4_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_4_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_4_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_4_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_4_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_4_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_4_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_4_4_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (4) => (4) @ (2)
							for (int i_0 = 4; i_0 <= 4; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_4_4_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_4_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (4) => (4) @ (2)
							for (int i_0 = 4; i_0 <= 4; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_4_4_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_4_4_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_4_V_pc_buffer;
		}

		// output port post check: "link_out_5_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_5_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_5_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_5_V, AESL_token); // data

			sc_bv<192> *link_out_5_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_5_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_5_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_5_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_5_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_5_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_5_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_5_5_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (5) => (5) @ (2)
							for (int i_0 = 5; i_0 <= 5; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_5_5_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_5_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (5) => (5) @ (2)
							for (int i_0 = 5; i_0 <= 5; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_5_5_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_5_5_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_5_V_pc_buffer;
		}

		// output port post check: "link_out_6_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_6_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_6_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_6_V, AESL_token); // data

			sc_bv<192> *link_out_6_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_6_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_6_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_6_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_6_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_6_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_6_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_6_6_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (6) => (6) @ (2)
							for (int i_0 = 6; i_0 <= 6; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_6_6_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_6_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (6) => (6) @ (2)
							for (int i_0 = 6; i_0 <= 6; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_6_6_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_6_6_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_6_V_pc_buffer;
		}

		// output port post check: "link_out_7_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_7_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_7_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_7_V, AESL_token); // data

			sc_bv<192> *link_out_7_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_7_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_7_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_7_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_7_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_7_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_7_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_7_7_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (7) => (7) @ (2)
							for (int i_0 = 7; i_0 <= 7; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_7_7_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_7_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (7) => (7) @ (2)
							for (int i_0 = 7; i_0 <= 7; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_7_7_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_7_7_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_7_V_pc_buffer;
		}

		// output port post check: "link_out_8_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_8_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_8_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_8_V, AESL_token); // data

			sc_bv<192> *link_out_8_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_8_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_8_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_8_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_8_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_8_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_8_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_8_8_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (8) => (8) @ (2)
							for (int i_0 = 8; i_0 <= 8; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_8_8_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_8_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (8) => (8) @ (2)
							for (int i_0 = 8; i_0 <= 8; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_8_8_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_8_8_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_8_V_pc_buffer;
		}

		// output port post check: "link_out_9_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_9_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_9_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_9_V, AESL_token); // data

			sc_bv<192> *link_out_9_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_9_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_9_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_9_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_9_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_9_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_9_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_9_9_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (9) => (9) @ (2)
							for (int i_0 = 9; i_0 <= 9; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_9_9_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_9_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (9) => (9) @ (2)
							for (int i_0 = 9; i_0 <= 9; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_9_9_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_9_9_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_9_V_pc_buffer;
		}

		// output port post check: "link_out_10_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_10_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_10_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_10_V, AESL_token); // data

			sc_bv<192> *link_out_10_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_10_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_10_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_10_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_10_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_10_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_10_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_10_10_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (10) => (10) @ (2)
							for (int i_0 = 10; i_0 <= 10; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_10_10_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_10_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (10) => (10) @ (2)
							for (int i_0 = 10; i_0 <= 10; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_10_10_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_10_10_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_10_V_pc_buffer;
		}

		// output port post check: "link_out_11_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_11_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_11_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_11_V, AESL_token); // data

			sc_bv<192> *link_out_11_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_11_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_11_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_11_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_11_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_11_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_11_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_11_11_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (11) => (11) @ (2)
							for (int i_0 = 11; i_0 <= 11; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_11_11_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_11_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (11) => (11) @ (2)
							for (int i_0 = 11; i_0 <= 11; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_11_11_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_11_11_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_11_V_pc_buffer;
		}

		// output port post check: "link_out_12_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_12_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_12_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_12_V, AESL_token); // data

			sc_bv<192> *link_out_12_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_12_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_12_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_12_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_12_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_12_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_12_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_12_12_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (12) => (12) @ (2)
							for (int i_0 = 12; i_0 <= 12; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_12_12_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_12_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (12) => (12) @ (2)
							for (int i_0 = 12; i_0 <= 12; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_12_12_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_12_12_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_12_V_pc_buffer;
		}

		// output port post check: "link_out_13_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_13_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_13_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_13_V, AESL_token); // data

			sc_bv<192> *link_out_13_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_13_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_13_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_13_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_13_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_13_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_13_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_13_13_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (13) => (13) @ (2)
							for (int i_0 = 13; i_0 <= 13; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_13_13_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_13_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (13) => (13) @ (2)
							for (int i_0 = 13; i_0 <= 13; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_13_13_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_13_13_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_13_V_pc_buffer;
		}

		// output port post check: "link_out_14_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_14_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_14_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_14_V, AESL_token); // data

			sc_bv<192> *link_out_14_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_14_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_14_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_14_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_14_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_14_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_14_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_14_14_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (14) => (14) @ (2)
							for (int i_0 = 14; i_0 <= 14; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_14_14_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_14_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (14) => (14) @ (2)
							for (int i_0 = 14; i_0 <= 14; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_14_14_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_14_14_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_14_V_pc_buffer;
		}

		// output port post check: "link_out_15_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_15_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_15_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_15_V, AESL_token); // data

			sc_bv<192> *link_out_15_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_15_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_15_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_15_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_15_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_15_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_15_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_15_15_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (15) => (15) @ (2)
							for (int i_0 = 15; i_0 <= 15; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_15_15_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_15_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (15) => (15) @ (2)
							for (int i_0 = 15; i_0 <= 15; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_15_15_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_15_15_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_15_V_pc_buffer;
		}

		// output port post check: "link_out_16_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_16_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_16_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_16_V, AESL_token); // data

			sc_bv<192> *link_out_16_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_16_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_16_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_16_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_16_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_16_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_16_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_16_16_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (16) => (16) @ (2)
							for (int i_0 = 16; i_0 <= 16; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_16_16_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_16_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (16) => (16) @ (2)
							for (int i_0 = 16; i_0 <= 16; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_16_16_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_16_16_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_16_V_pc_buffer;
		}

		// output port post check: "link_out_17_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_17_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_17_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_17_V, AESL_token); // data

			sc_bv<192> *link_out_17_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_17_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_17_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_17_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_17_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_17_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_17_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_17_17_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (17) => (17) @ (2)
							for (int i_0 = 17; i_0 <= 17; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_17_17_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_17_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (17) => (17) @ (2)
							for (int i_0 = 17; i_0 <= 17; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_17_17_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_17_17_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_17_V_pc_buffer;
		}

		// output port post check: "link_out_18_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_18_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_18_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_18_V, AESL_token); // data

			sc_bv<192> *link_out_18_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_18_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_18_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_18_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_18_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_18_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_18_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_18_18_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (18) => (18) @ (2)
							for (int i_0 = 18; i_0 <= 18; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_18_18_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_18_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (18) => (18) @ (2)
							for (int i_0 = 18; i_0 <= 18; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_18_18_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_18_18_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_18_V_pc_buffer;
		}

		// output port post check: "link_out_19_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_19_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_19_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_19_V, AESL_token); // data

			sc_bv<192> *link_out_19_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_19_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_19_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_19_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_19_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_19_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_19_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_19_19_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (19) => (19) @ (2)
							for (int i_0 = 19; i_0 <= 19; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_19_19_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_19_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (19) => (19) @ (2)
							for (int i_0 = 19; i_0 <= 19; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_19_19_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_19_19_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_19_V_pc_buffer;
		}

		// output port post check: "link_out_20_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_20_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_20_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_20_V, AESL_token); // data

			sc_bv<192> *link_out_20_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_20_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_20_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_20_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_20_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_20_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_20_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_20_20_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (20) => (20) @ (2)
							for (int i_0 = 20; i_0 <= 20; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_20_20_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_20_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (20) => (20) @ (2)
							for (int i_0 = 20; i_0 <= 20; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_20_20_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_20_20_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_20_V_pc_buffer;
		}

		// output port post check: "link_out_21_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_21_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_21_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_21_V, AESL_token); // data

			sc_bv<192> *link_out_21_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_21_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_21_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_21_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_21_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_21_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_21_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_21_21_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (21) => (21) @ (2)
							for (int i_0 = 21; i_0 <= 21; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_21_21_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_21_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (21) => (21) @ (2)
							for (int i_0 = 21; i_0 <= 21; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_21_21_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_21_21_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_21_V_pc_buffer;
		}

		// output port post check: "link_out_22_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_22_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_22_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_22_V, AESL_token); // data

			sc_bv<192> *link_out_22_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_22_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_22_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_22_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_22_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_22_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_22_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_22_22_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (22) => (22) @ (2)
							for (int i_0 = 22; i_0 <= 22; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_22_22_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_22_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (22) => (22) @ (2)
							for (int i_0 = 22; i_0 <= 22; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_22_22_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_22_22_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_22_V_pc_buffer;
		}

		// output port post check: "link_out_23_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_23_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_23_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_23_V, AESL_token); // data

			sc_bv<192> *link_out_23_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_23_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_23_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_23_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_23_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_23_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_23_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_23_23_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (23) => (23) @ (2)
							for (int i_0 = 23; i_0 <= 23; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_23_23_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_23_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (23) => (23) @ (2)
							for (int i_0 = 23; i_0 <= 23; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_23_23_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_23_23_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_23_V_pc_buffer;
		}

		// output port post check: "link_out_24_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_24_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_24_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_24_V, AESL_token); // data

			sc_bv<192> *link_out_24_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_24_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_24_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_24_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_24_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_24_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_24_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_24_24_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (24) => (24) @ (2)
							for (int i_0 = 24; i_0 <= 24; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_24_24_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_24_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (24) => (24) @ (2)
							for (int i_0 = 24; i_0 <= 24; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_24_24_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_24_24_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_24_V_pc_buffer;
		}

		// output port post check: "link_out_25_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_25_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_25_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_25_V, AESL_token); // data

			sc_bv<192> *link_out_25_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_25_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_25_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_25_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_25_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_25_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_25_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_25_25_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (25) => (25) @ (2)
							for (int i_0 = 25; i_0 <= 25; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_25_25_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_25_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (25) => (25) @ (2)
							for (int i_0 = 25; i_0 <= 25; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_25_25_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_25_25_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_25_V_pc_buffer;
		}

		// output port post check: "link_out_26_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_26_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_26_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_26_V, AESL_token); // data

			sc_bv<192> *link_out_26_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_26_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_26_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_26_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_26_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_26_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_26_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_26_26_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (26) => (26) @ (2)
							for (int i_0 = 26; i_0 <= 26; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_26_26_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_26_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (26) => (26) @ (2)
							for (int i_0 = 26; i_0 <= 26; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_26_26_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_26_26_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_26_V_pc_buffer;
		}

		// output port post check: "link_out_27_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_27_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_27_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_27_V, AESL_token); // data

			sc_bv<192> *link_out_27_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_27_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_27_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_27_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_27_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_27_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_27_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_27_27_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (27) => (27) @ (2)
							for (int i_0 = 27; i_0 <= 27; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_27_27_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_27_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (27) => (27) @ (2)
							for (int i_0 = 27; i_0 <= 27; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_27_27_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_27_27_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_27_V_pc_buffer;
		}

		// output port post check: "link_out_28_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_28_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_28_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_28_V, AESL_token); // data

			sc_bv<192> *link_out_28_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_28_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_28_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_28_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_28_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_28_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_28_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_28_28_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (28) => (28) @ (2)
							for (int i_0 = 28; i_0 <= 28; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_28_28_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_28_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (28) => (28) @ (2)
							for (int i_0 = 28; i_0 <= 28; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_28_28_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_28_28_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_28_V_pc_buffer;
		}

		// output port post check: "link_out_29_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_29_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_29_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_29_V, AESL_token); // data

			sc_bv<192> *link_out_29_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_29_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_29_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_29_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_29_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_29_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_29_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_29_29_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (29) => (29) @ (2)
							for (int i_0 = 29; i_0 <= 29; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_29_29_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_29_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (29) => (29) @ (2)
							for (int i_0 = 29; i_0 <= 29; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_29_29_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_29_29_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_29_V_pc_buffer;
		}

		// output port post check: "link_out_30_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_30_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_30_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_30_V, AESL_token); // data

			sc_bv<192> *link_out_30_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_30_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_30_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_30_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_30_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_30_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_30_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_30_30_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (30) => (30) @ (2)
							for (int i_0 = 30; i_0 <= 30; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_30_30_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_30_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (30) => (30) @ (2)
							for (int i_0 = 30; i_0 <= 30; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_30_30_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_30_30_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_30_V_pc_buffer;
		}

		// output port post check: "link_out_31_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_31_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_31_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_31_V, AESL_token); // data

			sc_bv<192> *link_out_31_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_31_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_31_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_31_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_31_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_31_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_31_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_31_31_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (31) => (31) @ (2)
							for (int i_0 = 31; i_0 <= 31; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_31_31_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_31_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (31) => (31) @ (2)
							for (int i_0 = 31; i_0 <= 31; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_31_31_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_31_31_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_31_V_pc_buffer;
		}

		// output port post check: "link_out_32_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_32_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_32_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_32_V, AESL_token); // data

			sc_bv<192> *link_out_32_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_32_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_32_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_32_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_32_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_32_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_32_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_32_32_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (32) => (32) @ (2)
							for (int i_0 = 32; i_0 <= 32; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_32_32_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_32_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (32) => (32) @ (2)
							for (int i_0 = 32; i_0 <= 32; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_32_32_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_32_32_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_32_V_pc_buffer;
		}

		// output port post check: "link_out_33_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_33_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_33_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_33_V, AESL_token); // data

			sc_bv<192> *link_out_33_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_33_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_33_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_33_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_33_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_33_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_33_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_33_33_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (33) => (33) @ (2)
							for (int i_0 = 33; i_0 <= 33; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_33_33_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_33_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (33) => (33) @ (2)
							for (int i_0 = 33; i_0 <= 33; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_33_33_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_33_33_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_33_V_pc_buffer;
		}

		// output port post check: "link_out_34_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_34_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_34_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_34_V, AESL_token); // data

			sc_bv<192> *link_out_34_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_34_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_34_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_34_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_34_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_34_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_34_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_34_34_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (34) => (34) @ (2)
							for (int i_0 = 34; i_0 <= 34; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_34_34_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_34_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (34) => (34) @ (2)
							for (int i_0 = 34; i_0 <= 34; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_34_34_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_34_34_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_34_V_pc_buffer;
		}

		// output port post check: "link_out_35_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_35_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_35_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_35_V, AESL_token); // data

			sc_bv<192> *link_out_35_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_35_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_35_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_35_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_35_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_35_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_35_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_35_35_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (35) => (35) @ (2)
							for (int i_0 = 35; i_0 <= 35; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_35_35_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_35_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (35) => (35) @ (2)
							for (int i_0 = 35; i_0 <= 35; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_35_35_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_35_35_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_35_V_pc_buffer;
		}

		// output port post check: "link_out_36_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_36_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_36_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_36_V, AESL_token); // data

			sc_bv<192> *link_out_36_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_36_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_36_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_36_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_36_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_36_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_36_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_36_36_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (36) => (36) @ (2)
							for (int i_0 = 36; i_0 <= 36; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_36_36_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_36_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (36) => (36) @ (2)
							for (int i_0 = 36; i_0 <= 36; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_36_36_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_36_36_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_36_V_pc_buffer;
		}

		// output port post check: "link_out_37_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_37_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_37_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_37_V, AESL_token); // data

			sc_bv<192> *link_out_37_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_37_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_37_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_37_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_37_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_37_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_37_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_37_37_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (37) => (37) @ (2)
							for (int i_0 = 37; i_0 <= 37; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_37_37_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_37_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (37) => (37) @ (2)
							for (int i_0 = 37; i_0 <= 37; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_37_37_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_37_37_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_37_V_pc_buffer;
		}

		// output port post check: "link_out_38_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_38_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_38_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_38_V, AESL_token); // data

			sc_bv<192> *link_out_38_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_38_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_38_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_38_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_38_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_38_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_38_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_38_38_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (38) => (38) @ (2)
							for (int i_0 = 38; i_0 <= 38; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_38_38_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_38_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (38) => (38) @ (2)
							for (int i_0 = 38; i_0 <= 38; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_38_38_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_38_38_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_38_V_pc_buffer;
		}

		// output port post check: "link_out_39_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_39_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_39_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_39_V, AESL_token); // data

			sc_bv<192> *link_out_39_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_39_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_39_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_39_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_39_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_39_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_39_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_39_39_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (39) => (39) @ (2)
							for (int i_0 = 39; i_0 <= 39; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_39_39_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_39_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (39) => (39) @ (2)
							for (int i_0 = 39; i_0 <= 39; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_39_39_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_39_39_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_39_V_pc_buffer;
		}

		// output port post check: "link_out_40_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_40_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_40_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_40_V, AESL_token); // data

			sc_bv<192> *link_out_40_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_40_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_40_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_40_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_40_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_40_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_40_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_40_40_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (40) => (40) @ (2)
							for (int i_0 = 40; i_0 <= 40; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_40_40_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_40_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (40) => (40) @ (2)
							for (int i_0 = 40; i_0 <= 40; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_40_40_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_40_40_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_40_V_pc_buffer;
		}

		// output port post check: "link_out_41_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_41_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_41_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_41_V, AESL_token); // data

			sc_bv<192> *link_out_41_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_41_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_41_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_41_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_41_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_41_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_41_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_41_41_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (41) => (41) @ (2)
							for (int i_0 = 41; i_0 <= 41; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_41_41_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_41_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (41) => (41) @ (2)
							for (int i_0 = 41; i_0 <= 41; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_41_41_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_41_41_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_41_V_pc_buffer;
		}

		// output port post check: "link_out_42_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_42_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_42_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_42_V, AESL_token); // data

			sc_bv<192> *link_out_42_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_42_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_42_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_42_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_42_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_42_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_42_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_42_42_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (42) => (42) @ (2)
							for (int i_0 = 42; i_0 <= 42; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_42_42_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_42_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (42) => (42) @ (2)
							for (int i_0 = 42; i_0 <= 42; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_42_42_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_42_42_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_42_V_pc_buffer;
		}

		// output port post check: "link_out_43_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_43_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_43_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_43_V, AESL_token); // data

			sc_bv<192> *link_out_43_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_43_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_43_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_43_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_43_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_43_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_43_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_43_43_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (43) => (43) @ (2)
							for (int i_0 = 43; i_0 <= 43; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_43_43_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_43_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (43) => (43) @ (2)
							for (int i_0 = 43; i_0 <= 43; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_43_43_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_43_43_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_43_V_pc_buffer;
		}

		// output port post check: "link_out_44_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_44_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_44_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_44_V, AESL_token); // data

			sc_bv<192> *link_out_44_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_44_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_44_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_44_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_44_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_44_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_44_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_44_44_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (44) => (44) @ (2)
							for (int i_0 = 44; i_0 <= 44; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_44_44_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_44_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (44) => (44) @ (2)
							for (int i_0 = 44; i_0 <= 44; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_44_44_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_44_44_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_44_V_pc_buffer;
		}

		// output port post check: "link_out_45_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_45_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_45_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_45_V, AESL_token); // data

			sc_bv<192> *link_out_45_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_45_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_45_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_45_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_45_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_45_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_45_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_45_45_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (45) => (45) @ (2)
							for (int i_0 = 45; i_0 <= 45; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_45_45_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_45_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (45) => (45) @ (2)
							for (int i_0 = 45; i_0 <= 45; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_45_45_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_45_45_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_45_V_pc_buffer;
		}

		// output port post check: "link_out_46_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_46_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_46_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_46_V, AESL_token); // data

			sc_bv<192> *link_out_46_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_46_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_46_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_46_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_46_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_46_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_46_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_46_46_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (46) => (46) @ (2)
							for (int i_0 = 46; i_0 <= 46; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_46_46_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_46_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (46) => (46) @ (2)
							for (int i_0 = 46; i_0 <= 46; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_46_46_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_46_46_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_46_V_pc_buffer;
		}

		// output port post check: "link_out_47_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_47_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_link_out_47_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_link_out_47_V, AESL_token); // data

			sc_bv<192> *link_out_47_V_pc_buffer = new sc_bv<192>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_47_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'link_out_47_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					link_out_47_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_link_out_47_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_link_out_47_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: link_out_47_V
				{
					// bitslice(191, 0)
					// {
						// celement: link_out.V(191, 0)
						// {
							sc_lv<192>* link_out_V_lv0_47_47_2 = new sc_lv<192>[1];
						// }
					// }

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (47) => (47) @ (2)
							for (int i_0 = 47; i_0 <= 47; i_0 += 2)
							{
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out_V_lv0_47_47_2[hls_map_index].range(191, 0) = sc_bv<192>(link_out_47_V_pc_buffer[hls_map_index].range(191, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(191, 0)
					{
						int hls_map_index = 0;
						// celement: link_out.V(191, 0)
						{
							// carray: (47) => (47) @ (2)
							for (int i_0 = 47; i_0 <= 47; i_0 += 2)
							{
								// sub                    : i_0
								// ori_name               : link_out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : link_out[0]
								// output_left_conversion : link_out[i_0]
								// output_type_conversion : (link_out_V_lv0_47_47_2[hls_map_index]).to_string(SC_BIN).c_str()
								if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
								{
									link_out[i_0] = (link_out_V_lv0_47_47_2[hls_map_index]).to_string(SC_BIN).c_str();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] link_out_47_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "link_in_0_V"
		char* tvin_link_in_0_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_0_V);

		// "link_in_1_V"
		char* tvin_link_in_1_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_1_V);

		// "link_in_2_V"
		char* tvin_link_in_2_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_2_V);

		// "link_in_3_V"
		char* tvin_link_in_3_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_3_V);

		// "link_in_4_V"
		char* tvin_link_in_4_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_4_V);

		// "link_in_5_V"
		char* tvin_link_in_5_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_5_V);

		// "link_in_6_V"
		char* tvin_link_in_6_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_6_V);

		// "link_in_7_V"
		char* tvin_link_in_7_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_7_V);

		// "link_in_8_V"
		char* tvin_link_in_8_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_8_V);

		// "link_in_9_V"
		char* tvin_link_in_9_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_9_V);

		// "link_in_10_V"
		char* tvin_link_in_10_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_10_V);

		// "link_in_11_V"
		char* tvin_link_in_11_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_11_V);

		// "link_in_12_V"
		char* tvin_link_in_12_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_12_V);

		// "link_in_13_V"
		char* tvin_link_in_13_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_13_V);

		// "link_in_14_V"
		char* tvin_link_in_14_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_14_V);

		// "link_in_15_V"
		char* tvin_link_in_15_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_15_V);

		// "link_in_16_V"
		char* tvin_link_in_16_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_16_V);

		// "link_in_17_V"
		char* tvin_link_in_17_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_17_V);

		// "link_in_18_V"
		char* tvin_link_in_18_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_18_V);

		// "link_in_19_V"
		char* tvin_link_in_19_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_19_V);

		// "link_in_20_V"
		char* tvin_link_in_20_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_20_V);

		// "link_in_21_V"
		char* tvin_link_in_21_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_21_V);

		// "link_in_22_V"
		char* tvin_link_in_22_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_22_V);

		// "link_in_23_V"
		char* tvin_link_in_23_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_23_V);

		// "link_in_24_V"
		char* tvin_link_in_24_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_24_V);

		// "link_in_25_V"
		char* tvin_link_in_25_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_25_V);

		// "link_in_26_V"
		char* tvin_link_in_26_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_26_V);

		// "link_in_27_V"
		char* tvin_link_in_27_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_27_V);

		// "link_in_28_V"
		char* tvin_link_in_28_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_28_V);

		// "link_in_29_V"
		char* tvin_link_in_29_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_29_V);

		// "link_in_30_V"
		char* tvin_link_in_30_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_30_V);

		// "link_in_31_V"
		char* tvin_link_in_31_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_31_V);

		// "link_in_32_V"
		char* tvin_link_in_32_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_32_V);

		// "link_in_33_V"
		char* tvin_link_in_33_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_33_V);

		// "link_in_34_V"
		char* tvin_link_in_34_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_34_V);

		// "link_in_35_V"
		char* tvin_link_in_35_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_35_V);

		// "link_in_36_V"
		char* tvin_link_in_36_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_36_V);

		// "link_in_37_V"
		char* tvin_link_in_37_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_37_V);

		// "link_in_38_V"
		char* tvin_link_in_38_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_38_V);

		// "link_in_39_V"
		char* tvin_link_in_39_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_39_V);

		// "link_in_40_V"
		char* tvin_link_in_40_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_40_V);

		// "link_in_41_V"
		char* tvin_link_in_41_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_41_V);

		// "link_in_42_V"
		char* tvin_link_in_42_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_42_V);

		// "link_in_43_V"
		char* tvin_link_in_43_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_43_V);

		// "link_in_44_V"
		char* tvin_link_in_44_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_44_V);

		// "link_in_45_V"
		char* tvin_link_in_45_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_45_V);

		// "link_in_46_V"
		char* tvin_link_in_46_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_46_V);

		// "link_in_47_V"
		char* tvin_link_in_47_V = new char[53];
		aesl_fh.touch(AUTOTB_TVIN_link_in_47_V);

		// "link_out_0_V"
		char* tvout_link_out_0_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_0_V);

		// "link_out_1_V"
		char* tvout_link_out_1_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_1_V);

		// "link_out_2_V"
		char* tvout_link_out_2_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_2_V);

		// "link_out_3_V"
		char* tvout_link_out_3_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_3_V);

		// "link_out_4_V"
		char* tvout_link_out_4_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_4_V);

		// "link_out_5_V"
		char* tvout_link_out_5_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_5_V);

		// "link_out_6_V"
		char* tvout_link_out_6_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_6_V);

		// "link_out_7_V"
		char* tvout_link_out_7_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_7_V);

		// "link_out_8_V"
		char* tvout_link_out_8_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_8_V);

		// "link_out_9_V"
		char* tvout_link_out_9_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_9_V);

		// "link_out_10_V"
		char* tvout_link_out_10_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_10_V);

		// "link_out_11_V"
		char* tvout_link_out_11_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_11_V);

		// "link_out_12_V"
		char* tvout_link_out_12_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_12_V);

		// "link_out_13_V"
		char* tvout_link_out_13_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_13_V);

		// "link_out_14_V"
		char* tvout_link_out_14_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_14_V);

		// "link_out_15_V"
		char* tvout_link_out_15_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_15_V);

		// "link_out_16_V"
		char* tvout_link_out_16_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_16_V);

		// "link_out_17_V"
		char* tvout_link_out_17_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_17_V);

		// "link_out_18_V"
		char* tvout_link_out_18_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_18_V);

		// "link_out_19_V"
		char* tvout_link_out_19_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_19_V);

		// "link_out_20_V"
		char* tvout_link_out_20_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_20_V);

		// "link_out_21_V"
		char* tvout_link_out_21_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_21_V);

		// "link_out_22_V"
		char* tvout_link_out_22_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_22_V);

		// "link_out_23_V"
		char* tvout_link_out_23_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_23_V);

		// "link_out_24_V"
		char* tvout_link_out_24_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_24_V);

		// "link_out_25_V"
		char* tvout_link_out_25_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_25_V);

		// "link_out_26_V"
		char* tvout_link_out_26_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_26_V);

		// "link_out_27_V"
		char* tvout_link_out_27_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_27_V);

		// "link_out_28_V"
		char* tvout_link_out_28_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_28_V);

		// "link_out_29_V"
		char* tvout_link_out_29_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_29_V);

		// "link_out_30_V"
		char* tvout_link_out_30_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_30_V);

		// "link_out_31_V"
		char* tvout_link_out_31_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_31_V);

		// "link_out_32_V"
		char* tvout_link_out_32_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_32_V);

		// "link_out_33_V"
		char* tvout_link_out_33_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_33_V);

		// "link_out_34_V"
		char* tvout_link_out_34_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_34_V);

		// "link_out_35_V"
		char* tvout_link_out_35_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_35_V);

		// "link_out_36_V"
		char* tvout_link_out_36_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_36_V);

		// "link_out_37_V"
		char* tvout_link_out_37_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_37_V);

		// "link_out_38_V"
		char* tvout_link_out_38_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_38_V);

		// "link_out_39_V"
		char* tvout_link_out_39_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_39_V);

		// "link_out_40_V"
		char* tvout_link_out_40_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_40_V);

		// "link_out_41_V"
		char* tvout_link_out_41_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_41_V);

		// "link_out_42_V"
		char* tvout_link_out_42_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_42_V);

		// "link_out_43_V"
		char* tvout_link_out_43_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_43_V);

		// "link_out_44_V"
		char* tvout_link_out_44_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_44_V);

		// "link_out_45_V"
		char* tvout_link_out_45_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_45_V);

		// "link_out_46_V"
		char* tvout_link_out_46_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_46_V);

		// "link_out_47_V"
		char* tvout_link_out_47_V = new char[53];
		aesl_fh.touch(AUTOTB_TVOUT_link_out_47_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_link_in_0_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_0_V, tvin_link_in_0_V);

		sc_bv<192>* link_in_0_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_0_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_0_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_0_V, "%s\n", (link_in_0_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_0_V, tvin_link_in_0_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_0_V_depth);
		sprintf(tvin_link_in_0_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_0_V, tvin_link_in_0_V);

		// release memory allocation
		delete [] link_in_0_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_1_V, tvin_link_in_1_V);

		sc_bv<192>* link_in_1_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_1_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (1) => (1) @ (2)
					for (int i_0 = 1; i_0 <= 1; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_1_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_1_V, "%s\n", (link_in_1_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_1_V, tvin_link_in_1_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_1_V_depth);
		sprintf(tvin_link_in_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_1_V, tvin_link_in_1_V);

		// release memory allocation
		delete [] link_in_1_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_2_V, tvin_link_in_2_V);

		sc_bv<192>* link_in_2_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_2_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (2) => (2) @ (2)
					for (int i_0 = 2; i_0 <= 2; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_2_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_2_V, "%s\n", (link_in_2_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_2_V, tvin_link_in_2_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_2_V_depth);
		sprintf(tvin_link_in_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_2_V, tvin_link_in_2_V);

		// release memory allocation
		delete [] link_in_2_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_3_V, tvin_link_in_3_V);

		sc_bv<192>* link_in_3_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_3_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (3) => (3) @ (2)
					for (int i_0 = 3; i_0 <= 3; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_3_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_3_V, "%s\n", (link_in_3_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_3_V, tvin_link_in_3_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_3_V_depth);
		sprintf(tvin_link_in_3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_3_V, tvin_link_in_3_V);

		// release memory allocation
		delete [] link_in_3_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_4_V, tvin_link_in_4_V);

		sc_bv<192>* link_in_4_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_4_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (4) => (4) @ (2)
					for (int i_0 = 4; i_0 <= 4; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_4_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_4_V, "%s\n", (link_in_4_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_4_V, tvin_link_in_4_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_4_V_depth);
		sprintf(tvin_link_in_4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_4_V, tvin_link_in_4_V);

		// release memory allocation
		delete [] link_in_4_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_5_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_5_V, tvin_link_in_5_V);

		sc_bv<192>* link_in_5_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_5_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (5) => (5) @ (2)
					for (int i_0 = 5; i_0 <= 5; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_5_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_5_V, "%s\n", (link_in_5_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_5_V, tvin_link_in_5_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_5_V_depth);
		sprintf(tvin_link_in_5_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_5_V, tvin_link_in_5_V);

		// release memory allocation
		delete [] link_in_5_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_6_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_6_V, tvin_link_in_6_V);

		sc_bv<192>* link_in_6_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_6_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (6) => (6) @ (2)
					for (int i_0 = 6; i_0 <= 6; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_6_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_6_V, "%s\n", (link_in_6_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_6_V, tvin_link_in_6_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_6_V_depth);
		sprintf(tvin_link_in_6_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_6_V, tvin_link_in_6_V);

		// release memory allocation
		delete [] link_in_6_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_7_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_7_V, tvin_link_in_7_V);

		sc_bv<192>* link_in_7_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_7_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (7) => (7) @ (2)
					for (int i_0 = 7; i_0 <= 7; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_7_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_7_V, "%s\n", (link_in_7_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_7_V, tvin_link_in_7_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_7_V_depth);
		sprintf(tvin_link_in_7_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_7_V, tvin_link_in_7_V);

		// release memory allocation
		delete [] link_in_7_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_8_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_8_V, tvin_link_in_8_V);

		sc_bv<192>* link_in_8_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_8_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (8) => (8) @ (2)
					for (int i_0 = 8; i_0 <= 8; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_8_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_8_V, "%s\n", (link_in_8_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_8_V, tvin_link_in_8_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_8_V_depth);
		sprintf(tvin_link_in_8_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_8_V, tvin_link_in_8_V);

		// release memory allocation
		delete [] link_in_8_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_9_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_9_V, tvin_link_in_9_V);

		sc_bv<192>* link_in_9_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_9_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (9) => (9) @ (2)
					for (int i_0 = 9; i_0 <= 9; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_9_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_9_V, "%s\n", (link_in_9_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_9_V, tvin_link_in_9_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_9_V_depth);
		sprintf(tvin_link_in_9_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_9_V, tvin_link_in_9_V);

		// release memory allocation
		delete [] link_in_9_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_10_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_10_V, tvin_link_in_10_V);

		sc_bv<192>* link_in_10_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_10_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (10) => (10) @ (2)
					for (int i_0 = 10; i_0 <= 10; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_10_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_10_V, "%s\n", (link_in_10_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_10_V, tvin_link_in_10_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_10_V_depth);
		sprintf(tvin_link_in_10_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_10_V, tvin_link_in_10_V);

		// release memory allocation
		delete [] link_in_10_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_11_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_11_V, tvin_link_in_11_V);

		sc_bv<192>* link_in_11_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_11_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (11) => (11) @ (2)
					for (int i_0 = 11; i_0 <= 11; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_11_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_11_V, "%s\n", (link_in_11_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_11_V, tvin_link_in_11_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_11_V_depth);
		sprintf(tvin_link_in_11_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_11_V, tvin_link_in_11_V);

		// release memory allocation
		delete [] link_in_11_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_12_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_12_V, tvin_link_in_12_V);

		sc_bv<192>* link_in_12_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_12_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (12) => (12) @ (2)
					for (int i_0 = 12; i_0 <= 12; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_12_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_12_V, "%s\n", (link_in_12_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_12_V, tvin_link_in_12_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_12_V_depth);
		sprintf(tvin_link_in_12_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_12_V, tvin_link_in_12_V);

		// release memory allocation
		delete [] link_in_12_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_13_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_13_V, tvin_link_in_13_V);

		sc_bv<192>* link_in_13_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_13_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (13) => (13) @ (2)
					for (int i_0 = 13; i_0 <= 13; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_13_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_13_V, "%s\n", (link_in_13_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_13_V, tvin_link_in_13_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_13_V_depth);
		sprintf(tvin_link_in_13_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_13_V, tvin_link_in_13_V);

		// release memory allocation
		delete [] link_in_13_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_14_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_14_V, tvin_link_in_14_V);

		sc_bv<192>* link_in_14_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_14_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (14) => (14) @ (2)
					for (int i_0 = 14; i_0 <= 14; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_14_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_14_V, "%s\n", (link_in_14_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_14_V, tvin_link_in_14_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_14_V_depth);
		sprintf(tvin_link_in_14_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_14_V, tvin_link_in_14_V);

		// release memory allocation
		delete [] link_in_14_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_15_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_15_V, tvin_link_in_15_V);

		sc_bv<192>* link_in_15_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_15_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (15) => (15) @ (2)
					for (int i_0 = 15; i_0 <= 15; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_15_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_15_V, "%s\n", (link_in_15_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_15_V, tvin_link_in_15_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_15_V_depth);
		sprintf(tvin_link_in_15_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_15_V, tvin_link_in_15_V);

		// release memory allocation
		delete [] link_in_15_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_16_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_16_V, tvin_link_in_16_V);

		sc_bv<192>* link_in_16_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_16_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (16) => (16) @ (2)
					for (int i_0 = 16; i_0 <= 16; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_16_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_16_V, "%s\n", (link_in_16_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_16_V, tvin_link_in_16_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_16_V_depth);
		sprintf(tvin_link_in_16_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_16_V, tvin_link_in_16_V);

		// release memory allocation
		delete [] link_in_16_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_17_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_17_V, tvin_link_in_17_V);

		sc_bv<192>* link_in_17_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_17_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (17) => (17) @ (2)
					for (int i_0 = 17; i_0 <= 17; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_17_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_17_V, "%s\n", (link_in_17_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_17_V, tvin_link_in_17_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_17_V_depth);
		sprintf(tvin_link_in_17_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_17_V, tvin_link_in_17_V);

		// release memory allocation
		delete [] link_in_17_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_18_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_18_V, tvin_link_in_18_V);

		sc_bv<192>* link_in_18_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_18_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (18) => (18) @ (2)
					for (int i_0 = 18; i_0 <= 18; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_18_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_18_V, "%s\n", (link_in_18_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_18_V, tvin_link_in_18_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_18_V_depth);
		sprintf(tvin_link_in_18_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_18_V, tvin_link_in_18_V);

		// release memory allocation
		delete [] link_in_18_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_19_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_19_V, tvin_link_in_19_V);

		sc_bv<192>* link_in_19_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_19_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (19) => (19) @ (2)
					for (int i_0 = 19; i_0 <= 19; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_19_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_19_V, "%s\n", (link_in_19_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_19_V, tvin_link_in_19_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_19_V_depth);
		sprintf(tvin_link_in_19_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_19_V, tvin_link_in_19_V);

		// release memory allocation
		delete [] link_in_19_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_20_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_20_V, tvin_link_in_20_V);

		sc_bv<192>* link_in_20_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_20_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (20) => (20) @ (2)
					for (int i_0 = 20; i_0 <= 20; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_20_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_20_V, "%s\n", (link_in_20_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_20_V, tvin_link_in_20_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_20_V_depth);
		sprintf(tvin_link_in_20_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_20_V, tvin_link_in_20_V);

		// release memory allocation
		delete [] link_in_20_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_21_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_21_V, tvin_link_in_21_V);

		sc_bv<192>* link_in_21_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_21_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (21) => (21) @ (2)
					for (int i_0 = 21; i_0 <= 21; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_21_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_21_V, "%s\n", (link_in_21_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_21_V, tvin_link_in_21_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_21_V_depth);
		sprintf(tvin_link_in_21_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_21_V, tvin_link_in_21_V);

		// release memory allocation
		delete [] link_in_21_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_22_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_22_V, tvin_link_in_22_V);

		sc_bv<192>* link_in_22_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_22_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (22) => (22) @ (2)
					for (int i_0 = 22; i_0 <= 22; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_22_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_22_V, "%s\n", (link_in_22_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_22_V, tvin_link_in_22_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_22_V_depth);
		sprintf(tvin_link_in_22_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_22_V, tvin_link_in_22_V);

		// release memory allocation
		delete [] link_in_22_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_23_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_23_V, tvin_link_in_23_V);

		sc_bv<192>* link_in_23_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_23_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (23) => (23) @ (2)
					for (int i_0 = 23; i_0 <= 23; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_23_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_23_V, "%s\n", (link_in_23_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_23_V, tvin_link_in_23_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_23_V_depth);
		sprintf(tvin_link_in_23_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_23_V, tvin_link_in_23_V);

		// release memory allocation
		delete [] link_in_23_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_24_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_24_V, tvin_link_in_24_V);

		sc_bv<192>* link_in_24_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_24_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (24) => (24) @ (2)
					for (int i_0 = 24; i_0 <= 24; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_24_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_24_V, "%s\n", (link_in_24_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_24_V, tvin_link_in_24_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_24_V_depth);
		sprintf(tvin_link_in_24_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_24_V, tvin_link_in_24_V);

		// release memory allocation
		delete [] link_in_24_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_25_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_25_V, tvin_link_in_25_V);

		sc_bv<192>* link_in_25_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_25_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (25) => (25) @ (2)
					for (int i_0 = 25; i_0 <= 25; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_25_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_25_V, "%s\n", (link_in_25_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_25_V, tvin_link_in_25_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_25_V_depth);
		sprintf(tvin_link_in_25_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_25_V, tvin_link_in_25_V);

		// release memory allocation
		delete [] link_in_25_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_26_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_26_V, tvin_link_in_26_V);

		sc_bv<192>* link_in_26_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_26_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (26) => (26) @ (2)
					for (int i_0 = 26; i_0 <= 26; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_26_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_26_V, "%s\n", (link_in_26_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_26_V, tvin_link_in_26_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_26_V_depth);
		sprintf(tvin_link_in_26_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_26_V, tvin_link_in_26_V);

		// release memory allocation
		delete [] link_in_26_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_27_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_27_V, tvin_link_in_27_V);

		sc_bv<192>* link_in_27_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_27_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (27) => (27) @ (2)
					for (int i_0 = 27; i_0 <= 27; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_27_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_27_V, "%s\n", (link_in_27_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_27_V, tvin_link_in_27_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_27_V_depth);
		sprintf(tvin_link_in_27_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_27_V, tvin_link_in_27_V);

		// release memory allocation
		delete [] link_in_27_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_28_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_28_V, tvin_link_in_28_V);

		sc_bv<192>* link_in_28_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_28_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (28) => (28) @ (2)
					for (int i_0 = 28; i_0 <= 28; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_28_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_28_V, "%s\n", (link_in_28_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_28_V, tvin_link_in_28_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_28_V_depth);
		sprintf(tvin_link_in_28_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_28_V, tvin_link_in_28_V);

		// release memory allocation
		delete [] link_in_28_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_29_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_29_V, tvin_link_in_29_V);

		sc_bv<192>* link_in_29_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_29_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (29) => (29) @ (2)
					for (int i_0 = 29; i_0 <= 29; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_29_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_29_V, "%s\n", (link_in_29_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_29_V, tvin_link_in_29_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_29_V_depth);
		sprintf(tvin_link_in_29_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_29_V, tvin_link_in_29_V);

		// release memory allocation
		delete [] link_in_29_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_30_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_30_V, tvin_link_in_30_V);

		sc_bv<192>* link_in_30_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_30_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (30) => (30) @ (2)
					for (int i_0 = 30; i_0 <= 30; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_30_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_30_V, "%s\n", (link_in_30_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_30_V, tvin_link_in_30_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_30_V_depth);
		sprintf(tvin_link_in_30_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_30_V, tvin_link_in_30_V);

		// release memory allocation
		delete [] link_in_30_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_31_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_31_V, tvin_link_in_31_V);

		sc_bv<192>* link_in_31_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_31_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (31) => (31) @ (2)
					for (int i_0 = 31; i_0 <= 31; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_31_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_31_V, "%s\n", (link_in_31_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_31_V, tvin_link_in_31_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_31_V_depth);
		sprintf(tvin_link_in_31_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_31_V, tvin_link_in_31_V);

		// release memory allocation
		delete [] link_in_31_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_32_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_32_V, tvin_link_in_32_V);

		sc_bv<192>* link_in_32_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_32_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (32) => (32) @ (2)
					for (int i_0 = 32; i_0 <= 32; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_32_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_32_V, "%s\n", (link_in_32_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_32_V, tvin_link_in_32_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_32_V_depth);
		sprintf(tvin_link_in_32_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_32_V, tvin_link_in_32_V);

		// release memory allocation
		delete [] link_in_32_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_33_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_33_V, tvin_link_in_33_V);

		sc_bv<192>* link_in_33_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_33_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (33) => (33) @ (2)
					for (int i_0 = 33; i_0 <= 33; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_33_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_33_V, "%s\n", (link_in_33_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_33_V, tvin_link_in_33_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_33_V_depth);
		sprintf(tvin_link_in_33_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_33_V, tvin_link_in_33_V);

		// release memory allocation
		delete [] link_in_33_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_34_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_34_V, tvin_link_in_34_V);

		sc_bv<192>* link_in_34_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_34_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (34) => (34) @ (2)
					for (int i_0 = 34; i_0 <= 34; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_34_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_34_V, "%s\n", (link_in_34_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_34_V, tvin_link_in_34_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_34_V_depth);
		sprintf(tvin_link_in_34_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_34_V, tvin_link_in_34_V);

		// release memory allocation
		delete [] link_in_34_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_35_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_35_V, tvin_link_in_35_V);

		sc_bv<192>* link_in_35_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_35_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (35) => (35) @ (2)
					for (int i_0 = 35; i_0 <= 35; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_35_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_35_V, "%s\n", (link_in_35_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_35_V, tvin_link_in_35_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_35_V_depth);
		sprintf(tvin_link_in_35_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_35_V, tvin_link_in_35_V);

		// release memory allocation
		delete [] link_in_35_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_36_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_36_V, tvin_link_in_36_V);

		sc_bv<192>* link_in_36_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_36_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (36) => (36) @ (2)
					for (int i_0 = 36; i_0 <= 36; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_36_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_36_V, "%s\n", (link_in_36_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_36_V, tvin_link_in_36_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_36_V_depth);
		sprintf(tvin_link_in_36_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_36_V, tvin_link_in_36_V);

		// release memory allocation
		delete [] link_in_36_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_37_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_37_V, tvin_link_in_37_V);

		sc_bv<192>* link_in_37_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_37_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (37) => (37) @ (2)
					for (int i_0 = 37; i_0 <= 37; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_37_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_37_V, "%s\n", (link_in_37_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_37_V, tvin_link_in_37_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_37_V_depth);
		sprintf(tvin_link_in_37_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_37_V, tvin_link_in_37_V);

		// release memory allocation
		delete [] link_in_37_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_38_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_38_V, tvin_link_in_38_V);

		sc_bv<192>* link_in_38_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_38_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (38) => (38) @ (2)
					for (int i_0 = 38; i_0 <= 38; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_38_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_38_V, "%s\n", (link_in_38_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_38_V, tvin_link_in_38_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_38_V_depth);
		sprintf(tvin_link_in_38_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_38_V, tvin_link_in_38_V);

		// release memory allocation
		delete [] link_in_38_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_39_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_39_V, tvin_link_in_39_V);

		sc_bv<192>* link_in_39_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_39_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (39) => (39) @ (2)
					for (int i_0 = 39; i_0 <= 39; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_39_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_39_V, "%s\n", (link_in_39_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_39_V, tvin_link_in_39_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_39_V_depth);
		sprintf(tvin_link_in_39_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_39_V, tvin_link_in_39_V);

		// release memory allocation
		delete [] link_in_39_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_40_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_40_V, tvin_link_in_40_V);

		sc_bv<192>* link_in_40_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_40_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (40) => (40) @ (2)
					for (int i_0 = 40; i_0 <= 40; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_40_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_40_V, "%s\n", (link_in_40_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_40_V, tvin_link_in_40_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_40_V_depth);
		sprintf(tvin_link_in_40_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_40_V, tvin_link_in_40_V);

		// release memory allocation
		delete [] link_in_40_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_41_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_41_V, tvin_link_in_41_V);

		sc_bv<192>* link_in_41_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_41_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (41) => (41) @ (2)
					for (int i_0 = 41; i_0 <= 41; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_41_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_41_V, "%s\n", (link_in_41_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_41_V, tvin_link_in_41_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_41_V_depth);
		sprintf(tvin_link_in_41_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_41_V, tvin_link_in_41_V);

		// release memory allocation
		delete [] link_in_41_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_42_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_42_V, tvin_link_in_42_V);

		sc_bv<192>* link_in_42_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_42_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (42) => (42) @ (2)
					for (int i_0 = 42; i_0 <= 42; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_42_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_42_V, "%s\n", (link_in_42_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_42_V, tvin_link_in_42_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_42_V_depth);
		sprintf(tvin_link_in_42_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_42_V, tvin_link_in_42_V);

		// release memory allocation
		delete [] link_in_42_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_43_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_43_V, tvin_link_in_43_V);

		sc_bv<192>* link_in_43_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_43_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (43) => (43) @ (2)
					for (int i_0 = 43; i_0 <= 43; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_43_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_43_V, "%s\n", (link_in_43_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_43_V, tvin_link_in_43_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_43_V_depth);
		sprintf(tvin_link_in_43_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_43_V, tvin_link_in_43_V);

		// release memory allocation
		delete [] link_in_43_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_44_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_44_V, tvin_link_in_44_V);

		sc_bv<192>* link_in_44_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_44_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (44) => (44) @ (2)
					for (int i_0 = 44; i_0 <= 44; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_44_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_44_V, "%s\n", (link_in_44_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_44_V, tvin_link_in_44_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_44_V_depth);
		sprintf(tvin_link_in_44_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_44_V, tvin_link_in_44_V);

		// release memory allocation
		delete [] link_in_44_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_45_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_45_V, tvin_link_in_45_V);

		sc_bv<192>* link_in_45_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_45_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (45) => (45) @ (2)
					for (int i_0 = 45; i_0 <= 45; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_45_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_45_V, "%s\n", (link_in_45_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_45_V, tvin_link_in_45_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_45_V_depth);
		sprintf(tvin_link_in_45_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_45_V, tvin_link_in_45_V);

		// release memory allocation
		delete [] link_in_45_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_46_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_46_V, tvin_link_in_46_V);

		sc_bv<192>* link_in_46_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_46_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (46) => (46) @ (2)
					for (int i_0 = 46; i_0 <= 46; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_46_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_46_V, "%s\n", (link_in_46_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_46_V, tvin_link_in_46_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_46_V_depth);
		sprintf(tvin_link_in_46_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_46_V, tvin_link_in_46_V);

		// release memory allocation
		delete [] link_in_46_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_link_in_47_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_link_in_47_V, tvin_link_in_47_V);

		sc_bv<192>* link_in_47_V_tvin_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_in_47_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_in.V(191, 0)
				{
					// carray: (47) => (47) @ (2)
					for (int i_0 = 47; i_0 <= 47; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_in[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_in[0]
						// regulate_c_name       : link_in_V
						// input_type_conversion : (link_in[i_0]).to_string(2).c_str()
						if (&(link_in[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_in_V_tmp_mem;
							link_in_V_tmp_mem = (link_in[i_0]).to_string(2).c_str();
							link_in_47_V_tvin_wrapc_buffer[hls_map_index].range(191, 0) = link_in_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_link_in_47_V, "%s\n", (link_in_47_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_link_in_47_V, tvin_link_in_47_V);
		}

		tcl_file.set_num(1, &tcl_file.link_in_47_V_depth);
		sprintf(tvin_link_in_47_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_link_in_47_V, tvin_link_in_47_V);

		// release memory allocation
		delete [] link_in_47_V_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		algo_unpacked(link_in, link_out);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_link_out_0_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_0_V, tvout_link_out_0_V);

		sc_bv<192>* link_out_0_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_0_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (0) => (0) @ (2)
					for (int i_0 = 0; i_0 <= 0; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_0_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_0_V, "%s\n", (link_out_0_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_0_V, tvout_link_out_0_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_0_V_depth);
		sprintf(tvout_link_out_0_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_0_V, tvout_link_out_0_V);

		// release memory allocation
		delete [] link_out_0_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_1_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_1_V, tvout_link_out_1_V);

		sc_bv<192>* link_out_1_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_1_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (1) => (1) @ (2)
					for (int i_0 = 1; i_0 <= 1; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_1_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_1_V, "%s\n", (link_out_1_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_1_V, tvout_link_out_1_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_1_V_depth);
		sprintf(tvout_link_out_1_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_1_V, tvout_link_out_1_V);

		// release memory allocation
		delete [] link_out_1_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_2_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_2_V, tvout_link_out_2_V);

		sc_bv<192>* link_out_2_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_2_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (2) => (2) @ (2)
					for (int i_0 = 2; i_0 <= 2; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_2_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_2_V, "%s\n", (link_out_2_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_2_V, tvout_link_out_2_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_2_V_depth);
		sprintf(tvout_link_out_2_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_2_V, tvout_link_out_2_V);

		// release memory allocation
		delete [] link_out_2_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_3_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_3_V, tvout_link_out_3_V);

		sc_bv<192>* link_out_3_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_3_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (3) => (3) @ (2)
					for (int i_0 = 3; i_0 <= 3; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_3_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_3_V, "%s\n", (link_out_3_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_3_V, tvout_link_out_3_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_3_V_depth);
		sprintf(tvout_link_out_3_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_3_V, tvout_link_out_3_V);

		// release memory allocation
		delete [] link_out_3_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_4_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_4_V, tvout_link_out_4_V);

		sc_bv<192>* link_out_4_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_4_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (4) => (4) @ (2)
					for (int i_0 = 4; i_0 <= 4; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_4_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_4_V, "%s\n", (link_out_4_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_4_V, tvout_link_out_4_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_4_V_depth);
		sprintf(tvout_link_out_4_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_4_V, tvout_link_out_4_V);

		// release memory allocation
		delete [] link_out_4_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_5_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_5_V, tvout_link_out_5_V);

		sc_bv<192>* link_out_5_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_5_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (5) => (5) @ (2)
					for (int i_0 = 5; i_0 <= 5; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_5_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_5_V, "%s\n", (link_out_5_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_5_V, tvout_link_out_5_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_5_V_depth);
		sprintf(tvout_link_out_5_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_5_V, tvout_link_out_5_V);

		// release memory allocation
		delete [] link_out_5_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_6_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_6_V, tvout_link_out_6_V);

		sc_bv<192>* link_out_6_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_6_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (6) => (6) @ (2)
					for (int i_0 = 6; i_0 <= 6; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_6_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_6_V, "%s\n", (link_out_6_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_6_V, tvout_link_out_6_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_6_V_depth);
		sprintf(tvout_link_out_6_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_6_V, tvout_link_out_6_V);

		// release memory allocation
		delete [] link_out_6_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_7_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_7_V, tvout_link_out_7_V);

		sc_bv<192>* link_out_7_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_7_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (7) => (7) @ (2)
					for (int i_0 = 7; i_0 <= 7; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_7_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_7_V, "%s\n", (link_out_7_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_7_V, tvout_link_out_7_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_7_V_depth);
		sprintf(tvout_link_out_7_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_7_V, tvout_link_out_7_V);

		// release memory allocation
		delete [] link_out_7_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_8_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_8_V, tvout_link_out_8_V);

		sc_bv<192>* link_out_8_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_8_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (8) => (8) @ (2)
					for (int i_0 = 8; i_0 <= 8; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_8_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_8_V, "%s\n", (link_out_8_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_8_V, tvout_link_out_8_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_8_V_depth);
		sprintf(tvout_link_out_8_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_8_V, tvout_link_out_8_V);

		// release memory allocation
		delete [] link_out_8_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_9_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_9_V, tvout_link_out_9_V);

		sc_bv<192>* link_out_9_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_9_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (9) => (9) @ (2)
					for (int i_0 = 9; i_0 <= 9; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_9_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_9_V, "%s\n", (link_out_9_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_9_V, tvout_link_out_9_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_9_V_depth);
		sprintf(tvout_link_out_9_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_9_V, tvout_link_out_9_V);

		// release memory allocation
		delete [] link_out_9_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_10_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_10_V, tvout_link_out_10_V);

		sc_bv<192>* link_out_10_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_10_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (10) => (10) @ (2)
					for (int i_0 = 10; i_0 <= 10; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_10_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_10_V, "%s\n", (link_out_10_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_10_V, tvout_link_out_10_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_10_V_depth);
		sprintf(tvout_link_out_10_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_10_V, tvout_link_out_10_V);

		// release memory allocation
		delete [] link_out_10_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_11_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_11_V, tvout_link_out_11_V);

		sc_bv<192>* link_out_11_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_11_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (11) => (11) @ (2)
					for (int i_0 = 11; i_0 <= 11; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_11_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_11_V, "%s\n", (link_out_11_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_11_V, tvout_link_out_11_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_11_V_depth);
		sprintf(tvout_link_out_11_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_11_V, tvout_link_out_11_V);

		// release memory allocation
		delete [] link_out_11_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_12_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_12_V, tvout_link_out_12_V);

		sc_bv<192>* link_out_12_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_12_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (12) => (12) @ (2)
					for (int i_0 = 12; i_0 <= 12; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_12_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_12_V, "%s\n", (link_out_12_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_12_V, tvout_link_out_12_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_12_V_depth);
		sprintf(tvout_link_out_12_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_12_V, tvout_link_out_12_V);

		// release memory allocation
		delete [] link_out_12_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_13_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_13_V, tvout_link_out_13_V);

		sc_bv<192>* link_out_13_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_13_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (13) => (13) @ (2)
					for (int i_0 = 13; i_0 <= 13; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_13_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_13_V, "%s\n", (link_out_13_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_13_V, tvout_link_out_13_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_13_V_depth);
		sprintf(tvout_link_out_13_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_13_V, tvout_link_out_13_V);

		// release memory allocation
		delete [] link_out_13_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_14_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_14_V, tvout_link_out_14_V);

		sc_bv<192>* link_out_14_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_14_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (14) => (14) @ (2)
					for (int i_0 = 14; i_0 <= 14; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_14_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_14_V, "%s\n", (link_out_14_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_14_V, tvout_link_out_14_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_14_V_depth);
		sprintf(tvout_link_out_14_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_14_V, tvout_link_out_14_V);

		// release memory allocation
		delete [] link_out_14_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_15_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_15_V, tvout_link_out_15_V);

		sc_bv<192>* link_out_15_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_15_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (15) => (15) @ (2)
					for (int i_0 = 15; i_0 <= 15; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_15_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_15_V, "%s\n", (link_out_15_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_15_V, tvout_link_out_15_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_15_V_depth);
		sprintf(tvout_link_out_15_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_15_V, tvout_link_out_15_V);

		// release memory allocation
		delete [] link_out_15_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_16_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_16_V, tvout_link_out_16_V);

		sc_bv<192>* link_out_16_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_16_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (16) => (16) @ (2)
					for (int i_0 = 16; i_0 <= 16; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_16_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_16_V, "%s\n", (link_out_16_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_16_V, tvout_link_out_16_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_16_V_depth);
		sprintf(tvout_link_out_16_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_16_V, tvout_link_out_16_V);

		// release memory allocation
		delete [] link_out_16_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_17_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_17_V, tvout_link_out_17_V);

		sc_bv<192>* link_out_17_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_17_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (17) => (17) @ (2)
					for (int i_0 = 17; i_0 <= 17; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_17_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_17_V, "%s\n", (link_out_17_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_17_V, tvout_link_out_17_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_17_V_depth);
		sprintf(tvout_link_out_17_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_17_V, tvout_link_out_17_V);

		// release memory allocation
		delete [] link_out_17_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_18_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_18_V, tvout_link_out_18_V);

		sc_bv<192>* link_out_18_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_18_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (18) => (18) @ (2)
					for (int i_0 = 18; i_0 <= 18; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_18_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_18_V, "%s\n", (link_out_18_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_18_V, tvout_link_out_18_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_18_V_depth);
		sprintf(tvout_link_out_18_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_18_V, tvout_link_out_18_V);

		// release memory allocation
		delete [] link_out_18_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_19_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_19_V, tvout_link_out_19_V);

		sc_bv<192>* link_out_19_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_19_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (19) => (19) @ (2)
					for (int i_0 = 19; i_0 <= 19; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_19_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_19_V, "%s\n", (link_out_19_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_19_V, tvout_link_out_19_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_19_V_depth);
		sprintf(tvout_link_out_19_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_19_V, tvout_link_out_19_V);

		// release memory allocation
		delete [] link_out_19_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_20_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_20_V, tvout_link_out_20_V);

		sc_bv<192>* link_out_20_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_20_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (20) => (20) @ (2)
					for (int i_0 = 20; i_0 <= 20; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_20_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_20_V, "%s\n", (link_out_20_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_20_V, tvout_link_out_20_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_20_V_depth);
		sprintf(tvout_link_out_20_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_20_V, tvout_link_out_20_V);

		// release memory allocation
		delete [] link_out_20_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_21_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_21_V, tvout_link_out_21_V);

		sc_bv<192>* link_out_21_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_21_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (21) => (21) @ (2)
					for (int i_0 = 21; i_0 <= 21; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_21_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_21_V, "%s\n", (link_out_21_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_21_V, tvout_link_out_21_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_21_V_depth);
		sprintf(tvout_link_out_21_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_21_V, tvout_link_out_21_V);

		// release memory allocation
		delete [] link_out_21_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_22_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_22_V, tvout_link_out_22_V);

		sc_bv<192>* link_out_22_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_22_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (22) => (22) @ (2)
					for (int i_0 = 22; i_0 <= 22; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_22_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_22_V, "%s\n", (link_out_22_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_22_V, tvout_link_out_22_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_22_V_depth);
		sprintf(tvout_link_out_22_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_22_V, tvout_link_out_22_V);

		// release memory allocation
		delete [] link_out_22_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_23_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_23_V, tvout_link_out_23_V);

		sc_bv<192>* link_out_23_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_23_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (23) => (23) @ (2)
					for (int i_0 = 23; i_0 <= 23; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_23_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_23_V, "%s\n", (link_out_23_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_23_V, tvout_link_out_23_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_23_V_depth);
		sprintf(tvout_link_out_23_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_23_V, tvout_link_out_23_V);

		// release memory allocation
		delete [] link_out_23_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_24_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_24_V, tvout_link_out_24_V);

		sc_bv<192>* link_out_24_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_24_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (24) => (24) @ (2)
					for (int i_0 = 24; i_0 <= 24; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_24_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_24_V, "%s\n", (link_out_24_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_24_V, tvout_link_out_24_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_24_V_depth);
		sprintf(tvout_link_out_24_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_24_V, tvout_link_out_24_V);

		// release memory allocation
		delete [] link_out_24_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_25_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_25_V, tvout_link_out_25_V);

		sc_bv<192>* link_out_25_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_25_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (25) => (25) @ (2)
					for (int i_0 = 25; i_0 <= 25; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_25_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_25_V, "%s\n", (link_out_25_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_25_V, tvout_link_out_25_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_25_V_depth);
		sprintf(tvout_link_out_25_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_25_V, tvout_link_out_25_V);

		// release memory allocation
		delete [] link_out_25_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_26_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_26_V, tvout_link_out_26_V);

		sc_bv<192>* link_out_26_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_26_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (26) => (26) @ (2)
					for (int i_0 = 26; i_0 <= 26; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_26_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_26_V, "%s\n", (link_out_26_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_26_V, tvout_link_out_26_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_26_V_depth);
		sprintf(tvout_link_out_26_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_26_V, tvout_link_out_26_V);

		// release memory allocation
		delete [] link_out_26_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_27_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_27_V, tvout_link_out_27_V);

		sc_bv<192>* link_out_27_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_27_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (27) => (27) @ (2)
					for (int i_0 = 27; i_0 <= 27; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_27_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_27_V, "%s\n", (link_out_27_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_27_V, tvout_link_out_27_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_27_V_depth);
		sprintf(tvout_link_out_27_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_27_V, tvout_link_out_27_V);

		// release memory allocation
		delete [] link_out_27_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_28_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_28_V, tvout_link_out_28_V);

		sc_bv<192>* link_out_28_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_28_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (28) => (28) @ (2)
					for (int i_0 = 28; i_0 <= 28; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_28_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_28_V, "%s\n", (link_out_28_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_28_V, tvout_link_out_28_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_28_V_depth);
		sprintf(tvout_link_out_28_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_28_V, tvout_link_out_28_V);

		// release memory allocation
		delete [] link_out_28_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_29_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_29_V, tvout_link_out_29_V);

		sc_bv<192>* link_out_29_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_29_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (29) => (29) @ (2)
					for (int i_0 = 29; i_0 <= 29; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_29_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_29_V, "%s\n", (link_out_29_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_29_V, tvout_link_out_29_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_29_V_depth);
		sprintf(tvout_link_out_29_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_29_V, tvout_link_out_29_V);

		// release memory allocation
		delete [] link_out_29_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_30_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_30_V, tvout_link_out_30_V);

		sc_bv<192>* link_out_30_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_30_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (30) => (30) @ (2)
					for (int i_0 = 30; i_0 <= 30; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_30_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_30_V, "%s\n", (link_out_30_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_30_V, tvout_link_out_30_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_30_V_depth);
		sprintf(tvout_link_out_30_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_30_V, tvout_link_out_30_V);

		// release memory allocation
		delete [] link_out_30_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_31_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_31_V, tvout_link_out_31_V);

		sc_bv<192>* link_out_31_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_31_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (31) => (31) @ (2)
					for (int i_0 = 31; i_0 <= 31; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_31_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_31_V, "%s\n", (link_out_31_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_31_V, tvout_link_out_31_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_31_V_depth);
		sprintf(tvout_link_out_31_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_31_V, tvout_link_out_31_V);

		// release memory allocation
		delete [] link_out_31_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_32_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_32_V, tvout_link_out_32_V);

		sc_bv<192>* link_out_32_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_32_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (32) => (32) @ (2)
					for (int i_0 = 32; i_0 <= 32; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_32_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_32_V, "%s\n", (link_out_32_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_32_V, tvout_link_out_32_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_32_V_depth);
		sprintf(tvout_link_out_32_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_32_V, tvout_link_out_32_V);

		// release memory allocation
		delete [] link_out_32_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_33_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_33_V, tvout_link_out_33_V);

		sc_bv<192>* link_out_33_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_33_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (33) => (33) @ (2)
					for (int i_0 = 33; i_0 <= 33; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_33_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_33_V, "%s\n", (link_out_33_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_33_V, tvout_link_out_33_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_33_V_depth);
		sprintf(tvout_link_out_33_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_33_V, tvout_link_out_33_V);

		// release memory allocation
		delete [] link_out_33_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_34_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_34_V, tvout_link_out_34_V);

		sc_bv<192>* link_out_34_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_34_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (34) => (34) @ (2)
					for (int i_0 = 34; i_0 <= 34; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_34_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_34_V, "%s\n", (link_out_34_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_34_V, tvout_link_out_34_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_34_V_depth);
		sprintf(tvout_link_out_34_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_34_V, tvout_link_out_34_V);

		// release memory allocation
		delete [] link_out_34_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_35_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_35_V, tvout_link_out_35_V);

		sc_bv<192>* link_out_35_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_35_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (35) => (35) @ (2)
					for (int i_0 = 35; i_0 <= 35; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_35_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_35_V, "%s\n", (link_out_35_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_35_V, tvout_link_out_35_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_35_V_depth);
		sprintf(tvout_link_out_35_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_35_V, tvout_link_out_35_V);

		// release memory allocation
		delete [] link_out_35_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_36_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_36_V, tvout_link_out_36_V);

		sc_bv<192>* link_out_36_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_36_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (36) => (36) @ (2)
					for (int i_0 = 36; i_0 <= 36; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_36_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_36_V, "%s\n", (link_out_36_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_36_V, tvout_link_out_36_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_36_V_depth);
		sprintf(tvout_link_out_36_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_36_V, tvout_link_out_36_V);

		// release memory allocation
		delete [] link_out_36_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_37_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_37_V, tvout_link_out_37_V);

		sc_bv<192>* link_out_37_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_37_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (37) => (37) @ (2)
					for (int i_0 = 37; i_0 <= 37; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_37_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_37_V, "%s\n", (link_out_37_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_37_V, tvout_link_out_37_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_37_V_depth);
		sprintf(tvout_link_out_37_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_37_V, tvout_link_out_37_V);

		// release memory allocation
		delete [] link_out_37_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_38_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_38_V, tvout_link_out_38_V);

		sc_bv<192>* link_out_38_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_38_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (38) => (38) @ (2)
					for (int i_0 = 38; i_0 <= 38; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_38_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_38_V, "%s\n", (link_out_38_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_38_V, tvout_link_out_38_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_38_V_depth);
		sprintf(tvout_link_out_38_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_38_V, tvout_link_out_38_V);

		// release memory allocation
		delete [] link_out_38_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_39_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_39_V, tvout_link_out_39_V);

		sc_bv<192>* link_out_39_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_39_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (39) => (39) @ (2)
					for (int i_0 = 39; i_0 <= 39; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_39_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_39_V, "%s\n", (link_out_39_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_39_V, tvout_link_out_39_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_39_V_depth);
		sprintf(tvout_link_out_39_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_39_V, tvout_link_out_39_V);

		// release memory allocation
		delete [] link_out_39_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_40_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_40_V, tvout_link_out_40_V);

		sc_bv<192>* link_out_40_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_40_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (40) => (40) @ (2)
					for (int i_0 = 40; i_0 <= 40; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_40_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_40_V, "%s\n", (link_out_40_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_40_V, tvout_link_out_40_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_40_V_depth);
		sprintf(tvout_link_out_40_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_40_V, tvout_link_out_40_V);

		// release memory allocation
		delete [] link_out_40_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_41_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_41_V, tvout_link_out_41_V);

		sc_bv<192>* link_out_41_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_41_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (41) => (41) @ (2)
					for (int i_0 = 41; i_0 <= 41; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_41_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_41_V, "%s\n", (link_out_41_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_41_V, tvout_link_out_41_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_41_V_depth);
		sprintf(tvout_link_out_41_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_41_V, tvout_link_out_41_V);

		// release memory allocation
		delete [] link_out_41_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_42_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_42_V, tvout_link_out_42_V);

		sc_bv<192>* link_out_42_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_42_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (42) => (42) @ (2)
					for (int i_0 = 42; i_0 <= 42; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_42_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_42_V, "%s\n", (link_out_42_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_42_V, tvout_link_out_42_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_42_V_depth);
		sprintf(tvout_link_out_42_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_42_V, tvout_link_out_42_V);

		// release memory allocation
		delete [] link_out_42_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_43_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_43_V, tvout_link_out_43_V);

		sc_bv<192>* link_out_43_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_43_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (43) => (43) @ (2)
					for (int i_0 = 43; i_0 <= 43; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_43_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_43_V, "%s\n", (link_out_43_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_43_V, tvout_link_out_43_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_43_V_depth);
		sprintf(tvout_link_out_43_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_43_V, tvout_link_out_43_V);

		// release memory allocation
		delete [] link_out_43_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_44_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_44_V, tvout_link_out_44_V);

		sc_bv<192>* link_out_44_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_44_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (44) => (44) @ (2)
					for (int i_0 = 44; i_0 <= 44; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_44_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_44_V, "%s\n", (link_out_44_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_44_V, tvout_link_out_44_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_44_V_depth);
		sprintf(tvout_link_out_44_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_44_V, tvout_link_out_44_V);

		// release memory allocation
		delete [] link_out_44_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_45_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_45_V, tvout_link_out_45_V);

		sc_bv<192>* link_out_45_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_45_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (45) => (45) @ (2)
					for (int i_0 = 45; i_0 <= 45; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_45_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_45_V, "%s\n", (link_out_45_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_45_V, tvout_link_out_45_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_45_V_depth);
		sprintf(tvout_link_out_45_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_45_V, tvout_link_out_45_V);

		// release memory allocation
		delete [] link_out_45_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_46_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_46_V, tvout_link_out_46_V);

		sc_bv<192>* link_out_46_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_46_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (46) => (46) @ (2)
					for (int i_0 = 46; i_0 <= 46; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_46_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_46_V, "%s\n", (link_out_46_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_46_V, tvout_link_out_46_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_46_V_depth);
		sprintf(tvout_link_out_46_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_46_V, tvout_link_out_46_V);

		// release memory allocation
		delete [] link_out_46_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_link_out_47_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_link_out_47_V, tvout_link_out_47_V);

		sc_bv<192>* link_out_47_V_tvout_wrapc_buffer = new sc_bv<192>[1];

		// RTL Name: link_out_47_V
		{
			// bitslice(191, 0)
			{
				int hls_map_index = 0;
				// celement: link_out.V(191, 0)
				{
					// carray: (47) => (47) @ (2)
					for (int i_0 = 47; i_0 <= 47; i_0 += 2)
					{
						// sub                   : i_0
						// ori_name              : link_out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : link_out[0]
						// regulate_c_name       : link_out_V
						// input_type_conversion : (link_out[i_0]).to_string(2).c_str()
						if (&(link_out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<192> link_out_V_tmp_mem;
							link_out_V_tmp_mem = (link_out[i_0]).to_string(2).c_str();
							link_out_47_V_tvout_wrapc_buffer[hls_map_index].range(191, 0) = link_out_V_tmp_mem.range(191, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_link_out_47_V, "%s\n", (link_out_47_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_link_out_47_V, tvout_link_out_47_V);
		}

		tcl_file.set_num(1, &tcl_file.link_out_47_V_depth);
		sprintf(tvout_link_out_47_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_link_out_47_V, tvout_link_out_47_V);

		// release memory allocation
		delete [] link_out_47_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "link_in_0_V"
		delete [] tvin_link_in_0_V;
		// release memory allocation: "link_in_1_V"
		delete [] tvin_link_in_1_V;
		// release memory allocation: "link_in_2_V"
		delete [] tvin_link_in_2_V;
		// release memory allocation: "link_in_3_V"
		delete [] tvin_link_in_3_V;
		// release memory allocation: "link_in_4_V"
		delete [] tvin_link_in_4_V;
		// release memory allocation: "link_in_5_V"
		delete [] tvin_link_in_5_V;
		// release memory allocation: "link_in_6_V"
		delete [] tvin_link_in_6_V;
		// release memory allocation: "link_in_7_V"
		delete [] tvin_link_in_7_V;
		// release memory allocation: "link_in_8_V"
		delete [] tvin_link_in_8_V;
		// release memory allocation: "link_in_9_V"
		delete [] tvin_link_in_9_V;
		// release memory allocation: "link_in_10_V"
		delete [] tvin_link_in_10_V;
		// release memory allocation: "link_in_11_V"
		delete [] tvin_link_in_11_V;
		// release memory allocation: "link_in_12_V"
		delete [] tvin_link_in_12_V;
		// release memory allocation: "link_in_13_V"
		delete [] tvin_link_in_13_V;
		// release memory allocation: "link_in_14_V"
		delete [] tvin_link_in_14_V;
		// release memory allocation: "link_in_15_V"
		delete [] tvin_link_in_15_V;
		// release memory allocation: "link_in_16_V"
		delete [] tvin_link_in_16_V;
		// release memory allocation: "link_in_17_V"
		delete [] tvin_link_in_17_V;
		// release memory allocation: "link_in_18_V"
		delete [] tvin_link_in_18_V;
		// release memory allocation: "link_in_19_V"
		delete [] tvin_link_in_19_V;
		// release memory allocation: "link_in_20_V"
		delete [] tvin_link_in_20_V;
		// release memory allocation: "link_in_21_V"
		delete [] tvin_link_in_21_V;
		// release memory allocation: "link_in_22_V"
		delete [] tvin_link_in_22_V;
		// release memory allocation: "link_in_23_V"
		delete [] tvin_link_in_23_V;
		// release memory allocation: "link_in_24_V"
		delete [] tvin_link_in_24_V;
		// release memory allocation: "link_in_25_V"
		delete [] tvin_link_in_25_V;
		// release memory allocation: "link_in_26_V"
		delete [] tvin_link_in_26_V;
		// release memory allocation: "link_in_27_V"
		delete [] tvin_link_in_27_V;
		// release memory allocation: "link_in_28_V"
		delete [] tvin_link_in_28_V;
		// release memory allocation: "link_in_29_V"
		delete [] tvin_link_in_29_V;
		// release memory allocation: "link_in_30_V"
		delete [] tvin_link_in_30_V;
		// release memory allocation: "link_in_31_V"
		delete [] tvin_link_in_31_V;
		// release memory allocation: "link_in_32_V"
		delete [] tvin_link_in_32_V;
		// release memory allocation: "link_in_33_V"
		delete [] tvin_link_in_33_V;
		// release memory allocation: "link_in_34_V"
		delete [] tvin_link_in_34_V;
		// release memory allocation: "link_in_35_V"
		delete [] tvin_link_in_35_V;
		// release memory allocation: "link_in_36_V"
		delete [] tvin_link_in_36_V;
		// release memory allocation: "link_in_37_V"
		delete [] tvin_link_in_37_V;
		// release memory allocation: "link_in_38_V"
		delete [] tvin_link_in_38_V;
		// release memory allocation: "link_in_39_V"
		delete [] tvin_link_in_39_V;
		// release memory allocation: "link_in_40_V"
		delete [] tvin_link_in_40_V;
		// release memory allocation: "link_in_41_V"
		delete [] tvin_link_in_41_V;
		// release memory allocation: "link_in_42_V"
		delete [] tvin_link_in_42_V;
		// release memory allocation: "link_in_43_V"
		delete [] tvin_link_in_43_V;
		// release memory allocation: "link_in_44_V"
		delete [] tvin_link_in_44_V;
		// release memory allocation: "link_in_45_V"
		delete [] tvin_link_in_45_V;
		// release memory allocation: "link_in_46_V"
		delete [] tvin_link_in_46_V;
		// release memory allocation: "link_in_47_V"
		delete [] tvin_link_in_47_V;
		// release memory allocation: "link_out_0_V"
		delete [] tvout_link_out_0_V;
		// release memory allocation: "link_out_1_V"
		delete [] tvout_link_out_1_V;
		// release memory allocation: "link_out_2_V"
		delete [] tvout_link_out_2_V;
		// release memory allocation: "link_out_3_V"
		delete [] tvout_link_out_3_V;
		// release memory allocation: "link_out_4_V"
		delete [] tvout_link_out_4_V;
		// release memory allocation: "link_out_5_V"
		delete [] tvout_link_out_5_V;
		// release memory allocation: "link_out_6_V"
		delete [] tvout_link_out_6_V;
		// release memory allocation: "link_out_7_V"
		delete [] tvout_link_out_7_V;
		// release memory allocation: "link_out_8_V"
		delete [] tvout_link_out_8_V;
		// release memory allocation: "link_out_9_V"
		delete [] tvout_link_out_9_V;
		// release memory allocation: "link_out_10_V"
		delete [] tvout_link_out_10_V;
		// release memory allocation: "link_out_11_V"
		delete [] tvout_link_out_11_V;
		// release memory allocation: "link_out_12_V"
		delete [] tvout_link_out_12_V;
		// release memory allocation: "link_out_13_V"
		delete [] tvout_link_out_13_V;
		// release memory allocation: "link_out_14_V"
		delete [] tvout_link_out_14_V;
		// release memory allocation: "link_out_15_V"
		delete [] tvout_link_out_15_V;
		// release memory allocation: "link_out_16_V"
		delete [] tvout_link_out_16_V;
		// release memory allocation: "link_out_17_V"
		delete [] tvout_link_out_17_V;
		// release memory allocation: "link_out_18_V"
		delete [] tvout_link_out_18_V;
		// release memory allocation: "link_out_19_V"
		delete [] tvout_link_out_19_V;
		// release memory allocation: "link_out_20_V"
		delete [] tvout_link_out_20_V;
		// release memory allocation: "link_out_21_V"
		delete [] tvout_link_out_21_V;
		// release memory allocation: "link_out_22_V"
		delete [] tvout_link_out_22_V;
		// release memory allocation: "link_out_23_V"
		delete [] tvout_link_out_23_V;
		// release memory allocation: "link_out_24_V"
		delete [] tvout_link_out_24_V;
		// release memory allocation: "link_out_25_V"
		delete [] tvout_link_out_25_V;
		// release memory allocation: "link_out_26_V"
		delete [] tvout_link_out_26_V;
		// release memory allocation: "link_out_27_V"
		delete [] tvout_link_out_27_V;
		// release memory allocation: "link_out_28_V"
		delete [] tvout_link_out_28_V;
		// release memory allocation: "link_out_29_V"
		delete [] tvout_link_out_29_V;
		// release memory allocation: "link_out_30_V"
		delete [] tvout_link_out_30_V;
		// release memory allocation: "link_out_31_V"
		delete [] tvout_link_out_31_V;
		// release memory allocation: "link_out_32_V"
		delete [] tvout_link_out_32_V;
		// release memory allocation: "link_out_33_V"
		delete [] tvout_link_out_33_V;
		// release memory allocation: "link_out_34_V"
		delete [] tvout_link_out_34_V;
		// release memory allocation: "link_out_35_V"
		delete [] tvout_link_out_35_V;
		// release memory allocation: "link_out_36_V"
		delete [] tvout_link_out_36_V;
		// release memory allocation: "link_out_37_V"
		delete [] tvout_link_out_37_V;
		// release memory allocation: "link_out_38_V"
		delete [] tvout_link_out_38_V;
		// release memory allocation: "link_out_39_V"
		delete [] tvout_link_out_39_V;
		// release memory allocation: "link_out_40_V"
		delete [] tvout_link_out_40_V;
		// release memory allocation: "link_out_41_V"
		delete [] tvout_link_out_41_V;
		// release memory allocation: "link_out_42_V"
		delete [] tvout_link_out_42_V;
		// release memory allocation: "link_out_43_V"
		delete [] tvout_link_out_43_V;
		// release memory allocation: "link_out_44_V"
		delete [] tvout_link_out_44_V;
		// release memory allocation: "link_out_45_V"
		delete [] tvout_link_out_45_V;
		// release memory allocation: "link_out_46_V"
		delete [] tvout_link_out_46_V;
		// release memory allocation: "link_out_47_V"
		delete [] tvout_link_out_47_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

