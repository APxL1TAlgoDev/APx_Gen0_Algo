// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mergeClusters.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mergeClusters::ap_const_logic_1 = sc_dt::Log_1;
const bool mergeClusters::ap_const_boolean_1 = true;
const sc_lv<16> mergeClusters::ap_const_lv16_0 = "0000000000000000";
const sc_logic mergeClusters::ap_const_logic_0 = sc_dt::Log_0;

mergeClusters::mergeClusters(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ieta1_cast1_fu_80_p1 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( iphi1_cast_fu_76_p1 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( cet1_write_assign_fu_118_p3 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ieta2_cast2_fu_72_p1 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( iphi2 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( cet2_write_assign_fu_126_p3 );

    SC_METHOD(thread_cet1_write_assign_fu_118_p3);
    sensitive << ( icet1 );
    sensitive << ( tmp_fu_84_p2 );
    sensitive << ( tmp_14_s_fu_102_p3 );

    SC_METHOD(thread_cet2_write_assign_fu_126_p3);
    sensitive << ( icet2 );
    sensitive << ( tmp_fu_84_p2 );
    sensitive << ( p_tmp_s_fu_110_p3 );

    SC_METHOD(thread_ieta1_cast1_fu_80_p1);
    sensitive << ( ieta1 );

    SC_METHOD(thread_ieta2_cast2_fu_72_p1);
    sensitive << ( ieta2 );

    SC_METHOD(thread_iphi1_cast1_fu_68_p1);
    sensitive << ( iphi1 );

    SC_METHOD(thread_iphi1_cast_fu_76_p1);
    sensitive << ( iphi1_cast1_fu_68_p1 );

    SC_METHOD(thread_p_tmp_s_fu_110_p3);
    sensitive << ( tmp_s_fu_90_p2 );
    sensitive << ( tmp_2_fu_96_p2 );

    SC_METHOD(thread_tmp_14_s_fu_102_p3);
    sensitive << ( tmp_s_fu_90_p2 );
    sensitive << ( tmp_2_fu_96_p2 );

    SC_METHOD(thread_tmp_2_fu_96_p2);
    sensitive << ( icet1 );
    sensitive << ( icet2 );

    SC_METHOD(thread_tmp_fu_84_p2);
    sensitive << ( ieta1 );
    sensitive << ( ieta2 );

    SC_METHOD(thread_tmp_s_fu_90_p2);
    sensitive << ( icet1 );
    sensitive << ( icet2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mergeClusters_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ieta1, "(port)ieta1");
    sc_trace(mVcdFile, iphi1, "(port)iphi1");
    sc_trace(mVcdFile, icet1, "(port)icet1");
    sc_trace(mVcdFile, ieta2, "(port)ieta2");
    sc_trace(mVcdFile, iphi2, "(port)iphi2");
    sc_trace(mVcdFile, icet2, "(port)icet2");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, iphi1_cast1_fu_68_p1, "iphi1_cast1_fu_68_p1");
    sc_trace(mVcdFile, tmp_s_fu_90_p2, "tmp_s_fu_90_p2");
    sc_trace(mVcdFile, tmp_2_fu_96_p2, "tmp_2_fu_96_p2");
    sc_trace(mVcdFile, tmp_fu_84_p2, "tmp_fu_84_p2");
    sc_trace(mVcdFile, tmp_14_s_fu_102_p3, "tmp_14_s_fu_102_p3");
    sc_trace(mVcdFile, p_tmp_s_fu_110_p3, "p_tmp_s_fu_110_p3");
    sc_trace(mVcdFile, ieta1_cast1_fu_80_p1, "ieta1_cast1_fu_80_p1");
    sc_trace(mVcdFile, iphi1_cast_fu_76_p1, "iphi1_cast_fu_76_p1");
    sc_trace(mVcdFile, cet1_write_assign_fu_118_p3, "cet1_write_assign_fu_118_p3");
    sc_trace(mVcdFile, ieta2_cast2_fu_72_p1, "ieta2_cast2_fu_72_p1");
    sc_trace(mVcdFile, cet2_write_assign_fu_126_p3, "cet2_write_assign_fu_126_p3");
#endif

    }
}

mergeClusters::~mergeClusters() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mergeClusters::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void mergeClusters::thread_ap_return_0() {
    ap_return_0 = ieta1_cast1_fu_80_p1.read();
}

void mergeClusters::thread_ap_return_1() {
    ap_return_1 = iphi1_cast_fu_76_p1.read();
}

void mergeClusters::thread_ap_return_2() {
    ap_return_2 = cet1_write_assign_fu_118_p3.read();
}

void mergeClusters::thread_ap_return_3() {
    ap_return_3 = ieta2_cast2_fu_72_p1.read();
}

void mergeClusters::thread_ap_return_4() {
    ap_return_4 = iphi2.read();
}

void mergeClusters::thread_ap_return_5() {
    ap_return_5 = cet2_write_assign_fu_126_p3.read();
}

void mergeClusters::thread_cet1_write_assign_fu_118_p3() {
    cet1_write_assign_fu_118_p3 = (!tmp_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_84_p2.read()[0].to_bool())? tmp_14_s_fu_102_p3.read(): icet1.read());
}

void mergeClusters::thread_cet2_write_assign_fu_126_p3() {
    cet2_write_assign_fu_126_p3 = (!tmp_fu_84_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_84_p2.read()[0].to_bool())? p_tmp_s_fu_110_p3.read(): icet2.read());
}

void mergeClusters::thread_ieta1_cast1_fu_80_p1() {
    ieta1_cast1_fu_80_p1 = esl_zext<16,3>(ieta1.read());
}

void mergeClusters::thread_ieta2_cast2_fu_72_p1() {
    ieta2_cast2_fu_72_p1 = esl_zext<16,3>(ieta2.read());
}

void mergeClusters::thread_iphi1_cast1_fu_68_p1() {
    iphi1_cast1_fu_68_p1 = esl_sext<5,4>(iphi1.read());
}

void mergeClusters::thread_iphi1_cast_fu_76_p1() {
    iphi1_cast_fu_76_p1 = esl_zext<16,5>(iphi1_cast1_fu_68_p1.read());
}

void mergeClusters::thread_p_tmp_s_fu_110_p3() {
    p_tmp_s_fu_110_p3 = (!tmp_s_fu_90_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_s_fu_90_p2.read()[0].to_bool())? ap_const_lv16_0: tmp_2_fu_96_p2.read());
}

void mergeClusters::thread_tmp_14_s_fu_102_p3() {
    tmp_14_s_fu_102_p3 = (!tmp_s_fu_90_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_s_fu_90_p2.read()[0].to_bool())? tmp_2_fu_96_p2.read(): ap_const_lv16_0);
}

void mergeClusters::thread_tmp_2_fu_96_p2() {
    tmp_2_fu_96_p2 = (!icet1.read().is_01() || !icet2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(icet1.read()) + sc_biguint<16>(icet2.read()));
}

void mergeClusters::thread_tmp_fu_84_p2() {
    tmp_fu_84_p2 = (!ieta1.read().is_01() || !ieta2.read().is_01())? sc_lv<1>(): sc_lv<1>(ieta1.read() == ieta2.read());
}

void mergeClusters::thread_tmp_s_fu_90_p2() {
    tmp_s_fu_90_p2 = (!icet1.read().is_01() || !icet2.read().is_01())? sc_lv<1>(): (sc_biguint<16>(icet1.read()) > sc_biguint<16>(icet2.read()));
}

}

